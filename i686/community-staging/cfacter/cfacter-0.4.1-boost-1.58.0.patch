diff --git a/lib/src/facts/linux/networking_resolver.cc b/lib/src/facts/linux/networking_resolver.cc
index 5ee6149..69bda3d 100644
--- a/lib/src/facts/linux/networking_resolver.cc
+++ b/lib/src/facts/linux/networking_resolver.cc
@@ -42,12 +42,12 @@ namespace facter { namespace facts { namespace linux {
         scoped_descriptor sock(socket(AF_INET, SOCK_DGRAM, 0));
         if (static_cast<int>(sock) < 0) {
             LOG_WARNING("socket failed: %1% (%2%): interface MTU fact is unavailable for interface %3%.", strerror(errno), errno, interface);
-            return {};
+            return boost::none;
         }
 
         if (ioctl(sock, SIOCGIFMTU, &req) == -1) {
             LOG_WARNING("ioctl failed: %1% (%2%): interface MTU fact is unavailable for interface %3%.", strerror(errno), errno, interface);
-            return {};
+            return boost::none;
         }
         return req.ifr_mtu;
     }
diff --git a/lib/src/facts/osx/networking_resolver.cc b/lib/src/facts/osx/networking_resolver.cc
index 7b27ee6..ea2335f 100644
--- a/lib/src/facts/osx/networking_resolver.cc
+++ b/lib/src/facts/osx/networking_resolver.cc
@@ -32,7 +32,7 @@ namespace facter { namespace facts { namespace osx {
     boost::optional<uint64_t> networking_resolver::get_link_mtu(string const& interface, void* data) const
     {
         if (!data) {
-            return {};
+            return boost::none;
         }
         return reinterpret_cast<if_data const*>(data)->ifi_mtu;
     }
