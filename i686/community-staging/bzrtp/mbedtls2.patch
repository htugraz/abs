diff -wbBur bzrtp-1.0.2/configure bzrtp-1.0.2,my/configure
--- bzrtp-1.0.2/configure	2015-05-07 18:49:06.000000000 +0300
+++ bzrtp-1.0.2,my/configure	2015-09-21 22:13:24.471826101 +0300
@@ -12488,7 +12488,7 @@
 	POLARSSL_LIBS="-L${polarssl_prefix}/lib"
 fi
 
-POLARSSL_LIBS="$POLARSSL_LIBS -lpolarssl"
+POLARSSL_LIBS="$POLARSSL_LIBS -lmbedtls"
 
 
 
diff -wbBur bzrtp-1.0.2/configure.ac bzrtp-1.0.2,my/configure.ac
--- bzrtp-1.0.2/configure.ac	2015-05-07 18:45:29.000000000 +0300
+++ bzrtp-1.0.2,my/configure.ac	2015-09-21 22:13:00.985159704 +0300
@@ -42,7 +42,7 @@
 	POLARSSL_LIBS="-L${polarssl_prefix}/lib"
 fi
 
-POLARSSL_LIBS="$POLARSSL_LIBS -lpolarssl"
+POLARSSL_LIBS="$POLARSSL_LIBS -lmbedtls"
 
 AC_SUBST(POLARSSL_LIBS)
 AC_SUBST(POLARSSL_CFLAGS)
diff -wbBur bzrtp-1.0.2/src/cryptoPolarssl.c bzrtp-1.0.2,my/src/cryptoPolarssl.c
--- bzrtp-1.0.2/src/cryptoPolarssl.c	2015-05-07 18:14:36.000000000 +0300
+++ bzrtp-1.0.2,my/src/cryptoPolarssl.c	2015-09-21 22:21:04.521820813 +0300
@@ -25,17 +25,18 @@
 #include <string.h>
 
 /* Random number generator */
-#include "polarssl/entropy.h"
-#include "polarssl/ctr_drbg.h"
+#include "mbedtls/compat-1.3.h"
+#include "mbedtls/entropy.h"
+#include "mbedtls/ctr_drbg.h"
 
 /* Hash function sha1(sha2 is different for polarssl v1.2 and v1.3 ) */
-#include "polarssl/sha1.h"
+#include "mbedtls/md.h"
 
 /* Asymmetrics encryption */
-#include "polarssl/dhm.h"
+#include "mbedtls/dhm.h"
 
 /* Symmetric encryption */
-#include "polarssl/aes.h"
+#include "mbedtls/aes.h"
 
 #include "cryptoWrapper.h"
 
@@ -133,7 +134,8 @@
 	
 	entropy_init(&(polarsslContext->entropyContext)); /* init the polarssl entropy engine */
 	/* init the polarssl rng context */
-	if (ctr_drbg_init(&(polarsslContext->rngContext), entropy_func, &(polarsslContext->entropyContext), (const unsigned char *)entropyString, entropyStringLength) != 0) {
+	ctr_drbg_init(&(polarsslContext->rngContext));
+	if (mbedtls_ctr_drbg_seed(&(polarsslContext->rngContext), entropy_func, &(polarsslContext->entropyContext), (const unsigned char *)entropyString, entropyStringLength) != 0) {
 		return NULL;
 	}
 
@@ -183,7 +185,8 @@
 		uint8_t *output)
 {
 	uint8_t hmacOutput[20];
-	sha1_hmac(key, keyLength, input, inputLength, hmacOutput);
+	const mbedtls_md_info_t *mdinfo = mbedtls_md_info_from_type(MBEDTLS_MD_SHA1);
+	mbedtls_md_hmac(mdinfo, key, keyLength, input, inputLength, hmacOutput);
 
 	/* check output length, can't be>20 */
 	if (hmacLength>20) {
@@ -396,11 +399,11 @@
 /*** End of code common to polarSSL version 1.2 and 1.3 ***/
 
 /* check polarssl version */
-#include <polarssl/version.h>
+#include <mbedtls/version.h>
 #if POLARSSL_VERSION_NUMBER >= 0x01030000 /* for Polarssl version 1.3 */
 
 /* Hashs */
-#include "polarssl/sha256.h"
+#include "mbedtls/sha256.h"
 
 /*
  * @brief SHA256 wrapper
@@ -444,7 +447,8 @@
 		uint8_t *output)
 {
 	uint8_t hmacOutput[32];
-	sha256_hmac(key, keyLength, input, inputLength, hmacOutput, 0); /* last param to zero to select SHA256 and not SHA224 */
+	const mbedtls_md_info_t *mdinfo = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
+	mbedtls_md_hmac(mdinfo, key, keyLength, input, inputLength, hmacOutput);
 
 	/* check output length, can't be>32 */
 	if (hmacLength>32) {
@@ -464,7 +468,7 @@
 	/* compute the secret key */
 	keyLength = context->primeLength; /* undocumented but this value seems to be in/out, so we must set it to the expected key length */
 	context->key = (uint8_t *)malloc(keyLength*sizeof(uint8_t)); /* allocate key buffer */
-	dhm_calc_secret((dhm_context *)(context->cryptoModuleData), context->key, &keyLength, (int (*)(void *, unsigned char *, size_t))rngFunction, rngContext);
+	dhm_calc_secret((dhm_context *)(context->cryptoModuleData), context->key, keyLength, &keyLength, (int (*)(void *, unsigned char *, size_t))rngFunction, rngContext);
 }
 
 
@@ -472,7 +476,7 @@
 #else /* POLAR SSL VERSION 1.2 */
 
 /* Hashs */
-#include "polarssl/sha2.h"
+#include "mbedtls/sha2.h"
 
 /*
  * @brief SHA256 wrapper
