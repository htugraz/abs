--- speech_tools/base_class/EST_TSimpleMatrix.cc.gcc	2009-02-18 20:56:24.000000000 +0800
+++ speech_tools/base_class/EST_TSimpleMatrix.cc	2012-10-14 13:06:35.000000000 +0800
@@ -44,6 +44,7 @@
 #include "EST_TVector.h"
 #include <fstream>
 #include <iostream>
+#include <cstring>
 #include "EST_cutils.h"
 
 template<class T> 
@@ -98,7 +99,7 @@
 	{
 	  int copy_r = Lof(this->num_rows(), new_rows);
 
-	  just_resize(new_rows, new_cols, &old_vals);
+	  this->just_resize(new_rows, new_cols, &old_vals);
 
           for (q=0; q<(copy_r*new_cols*sizeof(T)); q++) /* memcpy */
               ((char *)this->p_memory)[q] = ((char *)old_vals)[q];
@@ -127,9 +128,9 @@
 	  int copy_r = Lof(this->num_rows(), new_rows);
 	  int copy_c = Lof(this->num_columns(), new_cols);
 	  
-	  just_resize(new_rows, new_cols, &old_vals);
+	  this->just_resize(new_rows, new_cols, &old_vals);
 
-	  set_values(old_vals,
+	  this->set_values(old_vals,
 		     old_row_step, old_column_step,
 		     0, copy_r,
 		     0, copy_c);
--- speech_tools/base_class/EST_TSimpleVector.cc.gcc	2009-02-18 20:52:55.000000000 +0800
+++ speech_tools/base_class/EST_TSimpleVector.cc	2012-10-14 13:09:37.000000000 +0800
@@ -43,6 +43,7 @@
 #include "EST_TSimpleVector.h"
 #include "EST_matrix_support.h"
 #include <fstream>
+#include <cstring>
 #include "EST_cutils.h"
 
 template<class T> void EST_TSimpleVector<T>::copy(const EST_TSimpleVector<T> &a)
@@ -70,7 +71,7 @@
   int old_offset = this->p_offset;
   unsigned int q;
 
-  just_resize(newn, &old_vals);
+  this->just_resize(newn, &old_vals);
 
   if (set && old_vals)
     {
--- speech_tools/include/EST_TIterator.h.gcc	2004-05-04 08:00:16.000000000 +0800
+++ speech_tools/include/EST_TIterator.h	2012-10-14 12:52:52.000000000 +0800
@@ -101,7 +101,7 @@
 
   /// Create an iterator ready to run over the given container.
   EST_TIterator(const Container &over)
-    { begin(over); }
+    { this->begin(over); }
 
   /// Copy an iterator by assignment
   Iter &operator = (const Iter &orig)
@@ -109,7 +109,7 @@
 
   /// Assigning a container to an iterator sets it ready to start.
   Iter &operator = (const Container &over)
-    { begin(over); return *this;}
+    { this->begin(over); return *this;}
 
   /// Set the iterator ready to run over this container.
   void begin(const Container &over)
@@ -209,7 +209,7 @@
 
   /// Create an iterator ready to run over the given container.
   EST_TStructIterator(const Container &over)
-    { begin(over); }
+    { this->begin(over); }
 
   const Entry *operator ->() const
     {return &this->current();}
@@ -239,7 +239,7 @@
 
   /// Create an iterator ready to run over the given container.
   EST_TRwIterator(Container &over)
-    { begin(over); }
+    { this->begin(over); }
 
   /// Set the iterator ready to run over this container.
   void begin(Container &over)
@@ -289,7 +289,7 @@
 
   /// Create an iterator ready to run over the given container.
   EST_TRwStructIterator(Container &over)
-    { begin(over); }
+    { this->begin(over); }
 
   Entry *operator ->() const
     {return &this->current();}
--- speech_tools/include/EST_TNamedEnum.h.gcc	2004-09-30 20:53:36.000000000 +0800
+++ speech_tools/include/EST_TNamedEnum.h	2012-10-14 12:52:52.000000000 +0800
@@ -130,7 +130,7 @@
 	{this->initialise((const void *)defs); };
   EST_TNamedEnumI(EST_TValuedEnumDefinition<const char *,const char *,INFO> defs[], ENUM (*conv)(const char *))
 	{this->initialise((const void *)defs, conv); };
-  const char *name(ENUM tok, int n=0) const {return value(tok,n); };
+  const char *name(ENUM tok, int n=0) const {return this->value(tok,n); };
 
 };
 
--- festival/src/modules/Text/text_modes.cc.gcc	2012-10-14 13:08:54.000000000 +0800
+++ festival/src/modules/Text/text_modes.cc	2012-10-14 13:09:09.000000000 +0800
@@ -59,8 +59,8 @@
 void tts_file_user_mode(LISP filename, LISP params)
 {
 
-    volatile EST_String tmpname = make_tmp_filename();
-    volatile EST_String inname = (EST_String)get_c_string(filename);
+    EST_String tmpname = make_tmp_filename();
+    EST_String inname = (EST_String)get_c_string(filename);
     volatile EST_String filter;
     volatile EST_TokenStream ts;
     volatile LISP func;
