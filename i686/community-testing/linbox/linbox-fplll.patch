--- ./linbox/algorithms/lattice.h.orig	2012-06-07 02:30:32.000000000 -0600
+++ ./linbox/algorithms/lattice.h	2012-12-10 16:03:03.114827079 -0700
@@ -48,18 +48,7 @@
 
 
 #ifdef __LINBOX_HAVE_FPLLL
-// this is a damn FPLLL bug !!!
-namespace FPLLL {
-#define round
-#define trunc
 #include <fplll/fplll.h>
-#include <fplll/heuristic.h>
-#include <fplll/proved.h>
-#include <fplll/wrapper.h>
-#undef round
-#undef trunc
-}
-
 #endif
 
 
--- ./linbox/algorithms/lattice.inl.orig	2012-06-07 02:30:32.000000000 -0600
+++ ./linbox/algorithms/lattice.inl	2012-12-10 16:05:04.846262737 -0700
@@ -335,31 +335,31 @@ namespace LinBox
 		if (withU)
 			throw NotImplementedYet("not U");
 		// Convert H
-		FPLLL::ZZ_mat<ZT> B(H.rowdim(),H.coldim()) ;
+		fplll::ZZ_mat<ZT> B(H.rowdim(),H.coldim()) ;
 		for (size_t i = 0 ; i < H.rowdim() ; ++i) {
 			for (size_t j = 0 ; j < H.coldim() ; ++j) {
-				B.Set(i,j,FPLLL::Z_NR<ZT>(H.getEntry(i,j)) );
+				B.Set(i,j,fplll::Z_NR<ZT>(H.getEntry(i,j)) );
 			}
 		}
 		// LLL()
 		switch (meth.getMeth()) {
 		case (latticeMethod::latticeFPLLL::P) :
 			{
-				FPLLL::proved<ZT,double> lllMethod(&B,meth.getPrecision(),
+				fplll::proved<ZT,double> lllMethod(&B,meth.getPrecision(),
 							      meth.getEta(),meth.getDelta());
 				lllMethod.LLL();
 			}
 			break;
 		case (latticeMethod::latticeFPLLL::W) :
 			{
-				FPLLL::wrapper lllMethod(&B,meth.getPrecision(),
+				fplll::wrapper lllMethod(&B,meth.getPrecision(),
 						    meth.getEta(),meth.getDelta());
 				lllMethod.LLL();
 			}
 			break;
 		case (latticeMethod::latticeFPLLL::H) :
 			{
-				FPLLL::heuristic<ZT,double> lllMethod(&B,meth.getPrecision(),
+				fplll::heuristic<ZT,double> lllMethod(&B,meth.getPrecision(),
 								 meth.getEta(),meth.getDelta(),
 								 meth.getSiegel());
 				lllMethod.LLL();
--- ./linbox/algorithms/rational-reconstruction.h.orig	2012-06-07 02:30:32.000000000 -0600
+++ ./linbox/algorithms/rational-reconstruction.h	2012-12-10 16:05:42.491217743 -0700
@@ -1734,7 +1734,7 @@ namespace LinBox
 				for (size_t i=1;i< k+1;++i){
 					Lattice.setEntry(i,i, mod );
 					_r.convert(tmp, real_approximation[bad_num_index+i-1]);
-					Lattice.setEntry(0,i,FPLLL::Z_NR<mpz_t>(tmp.get_mpz()));
+					Lattice.setEntry(0,i,fplll::Z_NR<mpz_t>(tmp.get_mpz()));
 				}
 
 
--- ./configure.orig	2012-12-10 16:02:55.325073492 -0700
+++ ./configure	2012-12-10 16:03:03.118827059 -0700
@@ -17018,12 +17018,11 @@ fi
 /* end confdefs.h.  */
 
 	   #include <fplll/fplll.h>
-	   #include <fplll/solver.h>
 
 int
 main ()
 {
-enum EvaluatorType a ;
+enum fplll::MatPrintMode a ;
   ;
   return 0;
 }
