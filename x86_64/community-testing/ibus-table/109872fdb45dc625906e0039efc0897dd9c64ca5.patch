diff --git a/engine/main.py b/engine/main.py
index 782ad51..dff0c27 100644
--- a/engine/main.py
+++ b/engine/main.py
@@ -254,6 +254,9 @@ def main():
             _symbol = SubElement (_engine, 'symbol')
             _symbol.text = _sq_db.ime_properties.get('symbol')
 
+            _symbol = SubElement (_engine, 'symbol')
+            _symbol.text = _sq_db.get_ime_property ('symbol')
+
             _desc = SubElement (_engine, 'description')
             _desc.text = _sq_db.ime_properties.get('description')
 
diff --git a/engine/tabsqlitedb.py b/engine/tabsqlitedb.py
index b46d63a..d690cf8 100644
--- a/engine/tabsqlitedb.py
+++ b/engine/tabsqlitedb.py
@@ -146,6 +146,7 @@ class tabsqlitedb:
             print('Error while initializing database.')
         # create IME property table
         self.db.executescript('CREATE TABLE IF NOT EXISTS main.ime (attr TEXT, val TEXT);')
+<<<<<<< HEAD
         # Initalize missing attributes in the ime table with some
         # default values, they should be updated using the attributes
         # found in the source when creating a system database with
@@ -208,6 +209,58 @@ class tabsqlitedb:
             default_properties=self._default_ime_attributes)
         # shared variables in this class:
         self._mlen = int(self.ime_properties.get("max_key_length"))
+=======
+        # make sure we have values in ime table.
+        if not self.db.execute('SELECT val FROM main.ime \
+            WHERE attr="name";').fetchall():
+            ime_keys={'name':'',
+                      'name.zh_cn':'',
+                      'name.zh_hk':'',
+                      'name.zh_tw':'',
+                      'author':'somebody', 
+                      'uuid':'%s' % uuid.uuid4(),
+                      'serial_number':'%s' % time.strftime('%Y%m%d'),
+                      'icon':'ibus-table.svg',
+                      'license':'LGPL',
+                      'languages':'',
+                      'language_filter':'',
+                      'valid_input_chars':'abcdefghijklmnopqrstuvwxyz',
+                      'max_key_length':'4',
+            #          'commit_keys':'space',
+            #          'forward_keys':'Return',
+                      'select_keys':'1,2,3,4,5,6,7,8,9,0',
+                      'page_up_keys':'Page_Up,minus',
+                      'page_down_keys':'Page_Down,equal',
+                      'status_prompt':'',
+                      'def_full_width_punct':'TRUE',
+                      'def_full_width_letter':'FALSE',
+                      'user_can_define_phrase':'FALSE',
+                      'pinyin_mode':'FALSE',
+                      'dynamic_adjust':'FALSE',
+                      'auto_select':'false',
+                      'auto_commit':'false',
+                      #'no_check_chars':u'',
+                      'description':'A IME under IBus Table',
+                      'layout':'us',
+                      'symbol':'',
+                      'rules':'',
+                      #'rules':'ce2:p11+p12+p21+p22;ce3:p11+p21+p22+p31;ca4:p11+p21+p31+p41'}
+                      'least_commit_length':'0',
+                      'start_chars':'',
+                      'orientation':'1',
+                      'always_show_lookup':'true'
+                      # we use this entry for those IME, which don't
+                      # have rules to build up phrase, but still need
+                      # auto commit to preedit
+                      }
+            # inital the attribute in ime table, which should be updated from mabiao
+            for _name in ime_keys:
+                sqlstr = 'INSERT INTO main.ime (attr,val) VALUES (?,?);'
+                self.db.execute( sqlstr, (_name,ime_keys[_name]) )
+        # share variables in this class:
+        self._mlen = int ( self.get_ime_property ("max_key_length") )
+        # for chinese
+>>>>>>> master
         self._is_chinese = self.is_chinese()
         self.user_can_define_phrase = self.ime_properties.get('user_can_define_phrase')
         if self.user_can_define_phrase:
