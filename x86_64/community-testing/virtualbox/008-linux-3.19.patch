Index: src/VBox/Additions/linux/sharedfolders/regops.c
===================================================================
--- a/src/VBox/Additions/linux/sharedfolders/regops.c	(revision 97544)
+++ b/src/VBox/Additions/linux/sharedfolders/regops.c	(revision 97545)
@@ -108,7 +108,7 @@
     size_t tmp_size;
     size_t left = size;
     ssize_t total_bytes_read = 0;
-    struct inode *inode = file->f_dentry->d_inode;
+    struct inode *inode = GET_F_DENTRY(file)->d_inode;
     struct sf_glob_info *sf_g = GET_GLOB_INFO(inode->i_sb);
     struct sf_reg_info *sf_r = file->private_data;
     loff_t pos = *off;
@@ -183,7 +183,7 @@
     size_t tmp_size;
     size_t left = size;
     ssize_t total_bytes_written = 0;
-    struct inode *inode = file->f_dentry->d_inode;
+    struct inode *inode = GET_F_DENTRY(file)->d_inode;
     struct sf_inode_info *sf_i = GET_INODE_INFO(inode);
     struct sf_glob_info *sf_g = GET_GLOB_INFO(inode->i_sb);
     struct sf_reg_info *sf_r = file->private_data;
@@ -454,7 +454,7 @@
 #elif LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 static struct page *sf_reg_nopage(struct vm_area_struct *vma, unsigned long vaddr, int *type)
 # define SET_TYPE(t) *type = (t)
-#else /* LINUX_VERSION_CODE < KERNEL_VERSION (2, 6, 0) */
+#else /* LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 0) */
 static struct page *sf_reg_nopage(struct vm_area_struct *vma, unsigned long vaddr, int unused)
 # define SET_TYPE(t)
 #endif
@@ -465,7 +465,7 @@
     uint32_t nread = PAGE_SIZE;
     int err;
     struct file *file = vma->vm_file;
-    struct inode *inode = file->f_dentry->d_inode;
+    struct inode *inode = GET_F_DENTRY(file)->d_inode;
     struct sf_glob_info *sf_g = GET_GLOB_INFO(inode->i_sb);
     struct sf_reg_info *sf_r = file->private_data;
 
@@ -605,7 +605,7 @@
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 static int sf_readpage(struct file *file, struct page *page)
 {
-    struct inode *inode = file->f_dentry->d_inode;
+    struct inode *inode = GET_F_DENTRY(file)->d_inode;
     struct sf_glob_info *sf_g = GET_GLOB_INFO(inode->i_sb);
     struct sf_reg_info *sf_r = file->private_data;
     uint32_t nread = PAGE_SIZE;
Index: src/VBox/Additions/linux/sharedfolders/dirops.c
===================================================================
--- a/src/VBox/Additions/linux/sharedfolders/dirops.c	(revision 97544)
+++ b/src/VBox/Additions/linux/sharedfolders/dirops.c	(revision 97545)
@@ -126,15 +126,13 @@
 
     TRACE();
 
-    sf_g = GET_GLOB_INFO(dir->f_dentry->d_inode->i_sb);
+    inode = GET_F_DENTRY(dir)->d_inode;
+    sf_i = GET_INODE_INFO(inode);
+    sf_g = GET_GLOB_INFO(inode->i_sb);
     sf_d = dir->private_data;
 
     BUG_ON(!sf_g);
     BUG_ON(!sf_d);
-
-    inode = dir->f_dentry->d_inode;
-    sf_i = GET_INODE_INFO(inode);
-
     BUG_ON(!sf_i);
 
     if (sf_i->force_reread)
Index: src/VBox/Additions/linux/sharedfolders/vfsmod.h
===================================================================
--- a/src/VBox/Additions/linux/sharedfolders/vfsmod.h	(revision 97544)
+++ b/src/VBox/Additions/linux/sharedfolders/vfsmod.h	(revision 97545)
@@ -145,7 +145,7 @@
 # define SET_GLOB_INFO(sb, sf_g) (sb)->s_fs_info = sf_g
 #endif
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION (2, 6, 19) || defined(KERNEL_FC6)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 19) || defined(KERNEL_FC6)
 /* FC6 kernel 2.6.18, vanilla kernel 2.6.19+ */
 # define GET_INODE_INFO(i)       ((struct sf_inode_info *) (i)->i_private)
 # define SET_INODE_INFO(i, sf_i) (i)->i_private = sf_i
@@ -155,5 +155,11 @@
 # define SET_INODE_INFO(i, sf_i) (i)->u.generic_ip = sf_i
 #endif
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 19, 0)
+# define GET_F_DENTRY(f)        (f->f_path.dentry)
+#else
+# define GET_F_DENTRY(f)        (f->f_dentry)
 #endif
 
+#endif
+
