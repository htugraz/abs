From f39991f6bb31ea27685f3aae9e33a5a3f3a2242b Mon Sep 17 00:00:00 2001
From: Jacob Jenner Rasmussen <jacob@jener.dk>
Date: Sat, 6 Jun 2015 20:30:28 +0200
Subject: [PATCH] Global hotkey setters is no longer responsible for calling
 unbind on previously bound key

---
 src/guake/gconfhandler.py | 31 +++++++++++++++++++++++++------
 src/guake/guake_app.py    | 16 +++-------------
 src/guake/prefs.py        |  7 -------
 3 files changed, 28 insertions(+), 26 deletions(-)

diff --git a/src/guake/gconfhandler.py b/src/guake/gconfhandler.py
index 7cbaea4..9773c75 100644
--- a/src/guake/gconfhandler.py
+++ b/src/guake/gconfhandler.py
@@ -11,12 +11,13 @@
 from pango import FontDescription
 from xml.sax.saxutils import escape as xml_escape
 
-from guake.common import ShowableError
+from guake.common import pixmapfile
 from guake.common import _
 from guake.globals import GCONF_PATH
 from guake.globals import GKEY
 from guake.globals import KEY
 from guake.globals import LKEY
+import guake.notifier
 
 
 GCONF_MONOSPACE_FONT_PATH = '/desktop/gnome/interface/monospace_font_name'
@@ -345,8 +346,15 @@ def __init__(self, guake):
         self.client = gconf.client_get_default()
 
         notify_add = self.client.notify_add
-        notify_add(GKEY('show_hide'), self.reload_globals)
 
+        # Setup global keys
+        self.globalhotkeys = {}
+        globalkeys = ['show_hide']
+        for key in globalkeys:
+            notify_add(GKEY(key), self.reload_global)
+            self.client.notify(GKEY(key))
+
+        # Setup local keys
         keys = ['toggle_fullscreen', 'new_tab', 'close_tab', 'rename_current_tab',
                 'previous_tab', 'next_tab', 'clipboard_copy', 'clipboard_paste',
                 'quit', 'zoom_in', 'zoom_out', 'increase_height', 'decrease_height',
@@ -359,16 +367,27 @@ def __init__(self, guake):
             notify_add(LKEY(key), self.reload_accelerators)
             self.client.notify(LKEY(key))
 
-    def reload_globals(self, client, connection_id, entry, data):
+    def reload_global(self, client, connection_id, entry, data):
         """Unbind all global hotkeys and rebind the show_hide
         method. If more global hotkeys should be added, just connect
         the gconf key to the watch system and add.
         """
+        gkey = entry.get_key()
         key = entry.get_value().get_string()
+        try:
+            self.guake.hotkeys.unbind(self.globalhotkeys[gkey])
+        except KeyError:
+            pass
+        self.globalhotkeys[gkey] = key
         if not self.guake.hotkeys.bind(key, self.guake.show_hide):
-            raise ShowableError(_('key binding error'),
-                                _('Unable to bind global <b>%s</b> key') % xml_escape(key),
-                                -1)
+            keyval, mask = gtk.accelerator_parse(key)
+            label = gtk.accelerator_get_label(keyval, mask)
+            filename = pixmapfile('guake-notification.png')
+            guake.notifier.show_message(
+                _('Guake Terminal'),
+                _('A problem happened when binding <b>%s</b> key.\n'
+                  'Please use Guake Preferences dialog to choose another '
+                  'key') % xml_escape(label), filename)
 
     def reload_accelerators(self, *args):
         """Reassign an accel_group to guake main window and guake
diff --git a/src/guake/guake_app.py b/src/guake/guake_app.py
index ae25573..6167309 100644
--- a/src/guake/guake_app.py
+++ b/src/guake/guake_app.py
@@ -301,8 +301,8 @@ def window_event(*args):
 
         # loading and setting up configuration stuff
         GConfHandler(self)
-        GConfKeyHandler(self)
         self.hotkeys = keybinder
+        GConfKeyHandler(self)
         self.load_config()
 
         key = self.client.get_string(GKEY('show_hide'))
@@ -315,15 +315,7 @@ def window_event(*args):
         if self.client.get_bool(KEY('/general/start_fullscreen')):
             self.fullscreen()
 
-        if not self.hotkeys.bind(key, self.show_hide):
-            guake.notifier.show_message(
-                _('Guake Terminal'),
-                _('A problem happened when binding <b>%s</b> key.\n'
-                  'Please use Guake Preferences dialog to choose another '
-                  'key') % xml_escape(label), filename)
-            self.client.set_bool(KEY('/general/use_trayicon'), True)
-
-        elif self.client.get_bool(KEY('/general/use_popup')):
+        if self.client.get_bool(KEY('/general/use_popup')):
             # Pop-up that shows that guake is working properly (if not
             # unset in the preferences windows)
             guake.notifier.show_message(
@@ -571,9 +563,7 @@ def show_prefs(self, *args):
         Preferences window.
         """
         self.hide()
-        prefsdialog = PrefsDialog()
-        prefsdialog.set_keybinder(keybinder)
-        prefsdialog.show()
+        PrefsDialog().show()
 
     def is_iconified(self):
         if self.window.window:
diff --git a/src/guake/prefs.py b/src/guake/prefs.py
index 55bc3a5..341d9dd 100644
--- a/src/guake/prefs.py
+++ b/src/guake/prefs.py
@@ -951,9 +951,6 @@ def populate_display_n(self):
 
     # -- key handling --
 
-    def set_keybinder(self, keybinder):
-        self.keybinder = keybinder
-
     def on_key_edited(self, renderer, path, keycode, mask, keyval, model):
         """Callback that handles key edition in cellrenderer. It makes
         some tests to validate the key, like looking for already in
@@ -1005,10 +1002,6 @@ def each_key(model, path, subiter):
         giter = model.get_iter(path)
         model.set_value(giter, 2, hotkey)
 
-        # unbind previous key if it's the show/hide key
-        if(gconf_path == "/apps/guake/keybindings/global/show_hide"):
-            self.keybinder.unbind(self.client.get_string(gconf_path))
-
         # setting the new value in gconf
         self.client.set_string(gconf_path, key)
 
