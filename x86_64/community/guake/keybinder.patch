From 026d6571623dc8ea39912453493004d5d5315907 Mon Sep 17 00:00:00 2001
From: Jacob Jenner Rasmussen <jacob@jener.dk>
Date: Wed, 3 Jun 2015 20:04:51 +0200
Subject: [PATCH 1/5] Replaced GlobalHotkeys with the keybinder module

The keybinder module is available at https://github.com/engla/keybinder
Note: when setting a global hotkey the setter is responsable for calling unbind on the previously bound key
---
 configure.ac                              |   1 -
 src/guake/Makefile.am                     |   2 -
 src/guake/gconfhandler.py                 |   1 -
 src/guake/globalhotkeys.so                |   1 -
 src/guake/globalhotkeys/Makefile.am       |  17 -
 src/guake/globalhotkeys/eggaccelerators.c | 759 ------------------------------
 src/guake/globalhotkeys/eggaccelerators.h |  94 ----
 src/guake/globalhotkeys/example.py        |  79 ----
 src/guake/globalhotkeys/globalhotkeys.c   | 310 ------------
 src/guake/globalhotkeys/keybinder.c       | 331 -------------
 src/guake/globalhotkeys/keybinder.h       |  27 --
 src/guake/globalhotkeys/testbinding.c     |  89 ----
 src/guake/guake_app.py                    |  11 +-
 src/guake/prefs.py                        |   7 +
 14 files changed, 12 insertions(+), 1717 deletions(-)
 delete mode 120000 src/guake/globalhotkeys.so
 delete mode 100644 src/guake/globalhotkeys/Makefile.am
 delete mode 100644 src/guake/globalhotkeys/eggaccelerators.c
 delete mode 100644 src/guake/globalhotkeys/eggaccelerators.h
 delete mode 100644 src/guake/globalhotkeys/example.py
 delete mode 100644 src/guake/globalhotkeys/globalhotkeys.c
 delete mode 100644 src/guake/globalhotkeys/keybinder.c
 delete mode 100644 src/guake/globalhotkeys/keybinder.h
 delete mode 100644 src/guake/globalhotkeys/testbinding.c

diff --git a/configure.ac b/configure.ac
index cc67a79..a5424f9 100644
--- a/configure.ac
+++ b/configure.ac
@@ -96,7 +96,6 @@ AC_CONFIG_FILES([
     data/icons/Makefile
     po/Makefile.in
     src/guake/Makefile
-    src/guake/globalhotkeys/Makefile
     src/guake/globals.py
     doc/src/conf.py
 ])
diff --git a/src/guake/Makefile.am b/src/guake/Makefile.am
index 256eda7..6d975a0 100644
--- a/src/guake/Makefile.am
+++ b/src/guake/Makefile.am
@@ -1,5 +1,3 @@
-SUBDIRS = globalhotkeys
-
 guakemoduledir = $(pkgpythondir)
 guakemodule_PYTHON = __init__.py \
                      __main__.py \
diff --git a/src/guake/gconfhandler.py b/src/guake/gconfhandler.py
index 54584cf..7cbaea4 100644
--- a/src/guake/gconfhandler.py
+++ b/src/guake/gconfhandler.py
@@ -364,7 +364,6 @@ def reload_globals(self, client, connection_id, entry, data):
         method. If more global hotkeys should be added, just connect
         the gconf key to the watch system and add.
         """
-        self.guake.hotkeys.unbind_all()
         key = entry.get_value().get_string()
         if not self.guake.hotkeys.bind(key, self.guake.show_hide):
             raise ShowableError(_('key binding error'),
diff --git a/src/guake/globalhotkeys.so b/src/guake/globalhotkeys.so
deleted file mode 120000
index a42c08a..0000000
--- a/src/guake/globalhotkeys.so
+++ /dev/null
@@ -1 +0,0 @@
-globalhotkeys/.libs/globalhotkeys.so
\ No newline at end of file
diff --git a/src/guake/globalhotkeys/Makefile.am b/src/guake/globalhotkeys/Makefile.am
deleted file mode 100644
index c41f97f..0000000
--- a/src/guake/globalhotkeys/Makefile.am
+++ /dev/null
@@ -1,17 +0,0 @@
-guakepyexecdir = $(pkgpyexecdir)
-guakepyexec_LTLIBRARIES = globalhotkeys.la
-
-globalhotkeys_la_SOURCES = \
-	eggaccelerators.c \
-	keybinder.c \
-	globalhotkeys.c \
-	eggaccelerators.h \
-	keybinder.h
-
-AM_CPPFLAGS = \
-	$(DEPENDENCIES_CFLAGS) \
-	$(PYTHON_CFLAGS)
-
-AM_LDFLAGS = \
-	-module -avoid-version \
-	$(PYTHON_LIBS) $(DEPENDENCIES_LIBS)
diff --git a/src/guake/globalhotkeys/eggaccelerators.c b/src/guake/globalhotkeys/eggaccelerators.c
deleted file mode 100644
index 8085d47..0000000
--- a/src/guake/globalhotkeys/eggaccelerators.c
+++ /dev/null
@@ -1,759 +0,0 @@
-/* eggaccelerators.c
- * Copyright (C) 2002  Red Hat, Inc.; Copyright 1998, 2001 Tim Janik
- * Developed by Havoc Pennington, Tim Janik
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Library General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Library General Public License for more details.
- *
- * You should have received a copy of the GNU Library General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-#include "eggaccelerators.h"
-
-#include <stdlib.h>
-#include <string.h>
-#include <gdk/gdkx.h>
-#include <gdk/gdkkeysyms.h>
-#include <gtk/gtkaccelgroup.h>
-
-enum
-{
-  EGG_MODMAP_ENTRY_SHIFT   = 0,
-  EGG_MODMAP_ENTRY_LOCK    = 1,
-  EGG_MODMAP_ENTRY_CONTROL = 2,
-  EGG_MODMAP_ENTRY_MOD1    = 3,
-  EGG_MODMAP_ENTRY_MOD2    = 4,
-  EGG_MODMAP_ENTRY_MOD3    = 5,
-  EGG_MODMAP_ENTRY_MOD4    = 6,
-  EGG_MODMAP_ENTRY_MOD5    = 7,
-  EGG_MODMAP_ENTRY_LAST    = 8
-};
-
-#define MODMAP_ENTRY_TO_MODIFIER(x) (1 << (x))
-
-typedef struct
-{
-  EggVirtualModifierType mapping[EGG_MODMAP_ENTRY_LAST];
-
-} EggModmap;
-
-const EggModmap* egg_keymap_get_modmap (GdkKeymap *keymap);
-
-static inline gboolean
-is_alt (const gchar *string)
-{
-  return ((string[0] == '<') &&
-	  (string[1] == 'a' || string[1] == 'A') &&
-	  (string[2] == 'l' || string[2] == 'L') &&
-	  (string[3] == 't' || string[3] == 'T') &&
-	  (string[4] == '>'));
-}
-
-static inline gboolean
-is_ctl (const gchar *string)
-{
-  return ((string[0] == '<') &&
-	  (string[1] == 'c' || string[1] == 'C') &&
-	  (string[2] == 't' || string[2] == 'T') &&
-	  (string[3] == 'l' || string[3] == 'L') &&
-	  (string[4] == '>'));
-}
-
-static inline gboolean
-is_modx (const gchar *string)
-{
-  return ((string[0] == '<') &&
-	  (string[1] == 'm' || string[1] == 'M') &&
-	  (string[2] == 'o' || string[2] == 'O') &&
-	  (string[3] == 'd' || string[3] == 'D') &&
-	  (string[4] >= '1' && string[4] <= '5') &&
-	  (string[5] == '>'));
-}
-
-static inline gboolean
-is_ctrl (const gchar *string)
-{
-  return ((string[0] == '<') &&
-	  (string[1] == 'c' || string[1] == 'C') &&
-	  (string[2] == 't' || string[2] == 'T') &&
-	  (string[3] == 'r' || string[3] == 'R') &&
-	  (string[4] == 'l' || string[4] == 'L') &&
-	  (string[5] == '>'));
-}
-
-static inline gboolean
-is_shft (const gchar *string)
-{
-  return ((string[0] == '<') &&
-	  (string[1] == 's' || string[1] == 'S') &&
-	  (string[2] == 'h' || string[2] == 'H') &&
-	  (string[3] == 'f' || string[3] == 'F') &&
-	  (string[4] == 't' || string[4] == 'T') &&
-	  (string[5] == '>'));
-}
-
-static inline gboolean
-is_shift (const gchar *string)
-{
-  return ((string[0] == '<') &&
-	  (string[1] == 's' || string[1] == 'S') &&
-	  (string[2] == 'h' || string[2] == 'H') &&
-	  (string[3] == 'i' || string[3] == 'I') &&
-	  (string[4] == 'f' || string[4] == 'F') &&
-	  (string[5] == 't' || string[5] == 'T') &&
-	  (string[6] == '>'));
-}
-
-static inline gboolean
-is_control (const gchar *string)
-{
-  return ((string[0] == '<') &&
-	  (string[1] == 'c' || string[1] == 'C') &&
-	  (string[2] == 'o' || string[2] == 'O') &&
-	  (string[3] == 'n' || string[3] == 'N') &&
-	  (string[4] == 't' || string[4] == 'T') &&
-	  (string[5] == 'r' || string[5] == 'R') &&
-	  (string[6] == 'o' || string[6] == 'O') &&
-	  (string[7] == 'l' || string[7] == 'L') &&
-	  (string[8] == '>'));
-}
-
-static inline gboolean
-is_release (const gchar *string)
-{
-  return ((string[0] == '<') &&
-	  (string[1] == 'r' || string[1] == 'R') &&
-	  (string[2] == 'e' || string[2] == 'E') &&
-	  (string[3] == 'l' || string[3] == 'L') &&
-	  (string[4] == 'e' || string[4] == 'E') &&
-	  (string[5] == 'a' || string[5] == 'A') &&
-	  (string[6] == 's' || string[6] == 'S') &&
-	  (string[7] == 'e' || string[7] == 'E') &&
-	  (string[8] == '>'));
-}
-
-static inline gboolean
-is_meta (const gchar *string)
-{
-  return ((string[0] == '<') &&
-	  (string[1] == 'm' || string[1] == 'M') &&
-	  (string[2] == 'e' || string[2] == 'E') &&
-	  (string[3] == 't' || string[3] == 'T') &&
-	  (string[4] == 'a' || string[4] == 'A') &&
-	  (string[5] == '>'));
-}
-
-static inline gboolean
-is_super (const gchar *string)
-{
-  return ((string[0] == '<') &&
-	  (string[1] == 's' || string[1] == 'S') &&
-	  (string[2] == 'u' || string[2] == 'U') &&
-	  (string[3] == 'p' || string[3] == 'P') &&
-	  (string[4] == 'e' || string[4] == 'E') &&
-	  (string[5] == 'r' || string[5] == 'R') &&
-	  (string[6] == '>'));
-}
-
-static inline gboolean
-is_hyper (const gchar *string)
-{
-  return ((string[0] == '<') &&
-	  (string[1] == 'h' || string[1] == 'H') &&
-	  (string[2] == 'y' || string[2] == 'Y') &&
-	  (string[3] == 'p' || string[3] == 'P') &&
-	  (string[4] == 'e' || string[4] == 'E') &&
-	  (string[5] == 'r' || string[5] == 'R') &&
-	  (string[6] == '>'));
-}
-
-is_primary (const gchar *string)
-{
- return ((string[0] == '<') &&
- (string[1] == 'p' || string[1] == 'P') &&
- (string[2] == 'r' || string[2] == 'R') &&
- (string[3] == 'i' || string[3] == 'I') &&
- (string[4] == 'm' || string[4] == 'M') &&
- (string[5] == 'a' || string[5] == 'A') &&
- (string[6] == 'r' || string[6] == 'R') &&
- (string[7] == 'y' || string[7] == 'Y') &&
- (string[8] == '>'));
-}
-
-static inline gboolean
-is_keycode (const gchar *string)
-{
-  return ((string[0] == '0') &&
-	  (string[1] == 'x'));
-}
-
-/**
- * egg_accelerator_parse_virtual:
- * @accelerator:      string representing an accelerator
- * @accelerator_key:  return location for accelerator keyval
- * @accelerator_mods: return location for accelerator modifier mask
- *
- * Parses a string representing a virtual accelerator. The format
- * looks like "&lt;Control&gt;a" or "&lt;Shift&gt;&lt;Alt&gt;F1" or
- * "&lt;Release&gt;z" (the last one is for key release).  The parser
- * is fairly liberal and allows lower or upper case, and also
- * abbreviations such as "&lt;Ctl&gt;" and "&lt;Ctrl&gt;".
- *
- * If the parse fails, @accelerator_key and @accelerator_mods will
- * be set to 0 (zero) and %FALSE will be returned. If the string contains
- * only modifiers, @accelerator_key will be set to 0 but %TRUE will be
- * returned.
- *
- * The virtual vs. concrete accelerator distinction is a relic of
- * how the X Window System works; there are modifiers Mod2-Mod5 that
- * can represent various keyboard keys (numlock, meta, hyper, etc.),
- * the virtual modifier represents the keyboard key, the concrete
- * modifier the actual Mod2-Mod5 bits in the key press event.
- *
- * Returns: %TRUE on success.
- */
-gboolean
-egg_accelerator_parse_virtual (const gchar            *accelerator,
-                               guint                  *accelerator_key,
-			       guint                  *keycode,
-                               EggVirtualModifierType *accelerator_mods)
-{
-  guint keyval;
-  GdkModifierType mods;
-  gint len;
-  gboolean bad_keyval;
-
-  if (accelerator_key)
-    *accelerator_key = 0;
-  if (accelerator_mods)
-    *accelerator_mods = 0;
-  if (keycode)
-    *keycode = 0;
-
-  g_return_val_if_fail (accelerator != NULL, FALSE);
-
-  bad_keyval = FALSE;
-
-  keyval = 0;
-  mods = 0;
-  len = strlen (accelerator);
-  while (len)
-    {
-      if (*accelerator == '<')
-	{
-	  if (len >= 9 && is_release (accelerator))
-	    {
-	      accelerator += 9;
-	      len -= 9;
-	      mods |= EGG_VIRTUAL_RELEASE_MASK;
-	    }
-	  else if (len >= 9 && is_control (accelerator))
-	    {
-	      accelerator += 9;
-	      len -= 9;
-	      mods |= EGG_VIRTUAL_CONTROL_MASK;
-	    }
-	  else if (len >= 7 && is_shift (accelerator))
-	    {
-	      accelerator += 7;
-	      len -= 7;
-	      mods |= EGG_VIRTUAL_SHIFT_MASK;
-	    }
-	  else if (len >= 6 && is_shft (accelerator))
-	    {
-	      accelerator += 6;
-	      len -= 6;
-	      mods |= EGG_VIRTUAL_SHIFT_MASK;
-	    }
-	  else if (len >= 6 && is_ctrl (accelerator))
-	    {
-	      accelerator += 6;
-	      len -= 6;
-	      mods |= EGG_VIRTUAL_CONTROL_MASK;
-	    }
-	  else if (len >= 6 && is_modx (accelerator))
-	    {
-	      static const guint mod_vals[] = {
-		EGG_VIRTUAL_ALT_MASK, EGG_VIRTUAL_MOD2_MASK, EGG_VIRTUAL_MOD3_MASK,
-		EGG_VIRTUAL_MOD4_MASK, EGG_VIRTUAL_MOD5_MASK
-	      };
-
-	      len -= 6;
-	      accelerator += 4;
-	      mods |= mod_vals[*accelerator - '1'];
-	      accelerator += 2;
-	    }
-	  else if (len >= 5 && is_ctl (accelerator))
-	    {
-	      accelerator += 5;
-	      len -= 5;
-	      mods |= EGG_VIRTUAL_CONTROL_MASK;
-	    }
-	  else if (len >= 5 && is_alt (accelerator))
-	    {
-	      accelerator += 5;
-	      len -= 5;
-	      mods |= EGG_VIRTUAL_ALT_MASK;
-	    }
-          else if (len >= 6 && is_meta (accelerator))
-	    {
-	      accelerator += 6;
-	      len -= 6;
-	      mods |= EGG_VIRTUAL_META_MASK;
-	    }
-          else if (len >= 7 && is_hyper (accelerator))
-	    {
-	      accelerator += 7;
-	      len -= 7;
-	      mods |= EGG_VIRTUAL_HYPER_MASK;
-	    }
-          else if (len >= 7 && is_super (accelerator))
-	    {
-	      accelerator += 7;
-	      len -= 7;
-	      mods |= EGG_VIRTUAL_SUPER_MASK;
-	    }
-          else if (len >= 9 && is_primary (accelerator))
-      {
-        accelerator += 9;
-        len -= 9;
-        mods |= EGG_VIRTUAL_CONTROL_MASK;
-      }
-	  else
-	    {
-	      gchar last_ch;
-
-	      last_ch = *accelerator;
-	      while (last_ch && last_ch != '>')
-		{
-		  last_ch = *accelerator;
-		  accelerator += 1;
-		  len -= 1;
-		}
-	    }
-	}
-      else
-	{
-          keyval = gdk_keyval_from_name (accelerator);
-
-          if (keyval == 0)
-	    {
-	      /* If keyval is 0, than maybe it's a keycode.  Check for 0x## */
-	      if (len >= 4 && is_keycode (accelerator))
-		{
-		  char keystring[5];
-		  gchar *endptr;
-		  gint tmp_keycode;
-
-		  memcpy (keystring, accelerator, 4);
-		  keystring [4] = '\000';
-
-		  tmp_keycode = strtol (keystring, &endptr, 16);
-
-		  if (endptr == NULL || *endptr != '\000')
-		    {
-		      bad_keyval = TRUE;
-		    }
-		  else
-		    {
-		      *keycode = tmp_keycode;
-		      /* 0x00 is an invalid keycode too. */
-		      if (*keycode == 0)
-			bad_keyval = TRUE;
-		    }
-		}
-	    }
-
-          accelerator += len;
-          len -= len;
-	}
-    }
-
-  if (accelerator_key)
-    *accelerator_key = gdk_keyval_to_lower (keyval);
-  if (accelerator_mods)
-    *accelerator_mods = mods;
-
-  return !bad_keyval;
-}
-
-/**
- * egg_virtual_accelerator_name:
- * @accelerator_key:  accelerator keyval
- * @accelerator_mods: accelerator modifier mask
- * @returns:          a newly-allocated accelerator name
- *
- * Converts an accelerator keyval and modifier mask
- * into a string parseable by egg_accelerator_parse_virtual().
- * For example, if you pass in #GDK_q and #EGG_VIRTUAL_CONTROL_MASK,
- * this function returns "&lt;Control&gt;q".
- *
- * The caller of this function must free the returned string.
- */
-gchar*
-egg_virtual_accelerator_name (guint                  accelerator_key,
-			      guint		     keycode,
-                              EggVirtualModifierType accelerator_mods)
-{
-  static const gchar text_release[] = "<Release>";
-  static const gchar text_shift[] = "<Shift>";
-  static const gchar text_control[] = "<Control>";
-  static const gchar text_mod1[] = "<Alt>";
-  static const gchar text_mod2[] = "<Mod2>";
-  static const gchar text_mod3[] = "<Mod3>";
-  static const gchar text_mod4[] = "<Mod4>";
-  static const gchar text_mod5[] = "<Mod5>";
-  static const gchar text_meta[] = "<Meta>";
-  static const gchar text_super[] = "<Super>";
-  static const gchar text_hyper[] = "<Hyper>";
-  guint l;
-  gchar *keyval_name, *str = NULL;
-  gchar *accelerator;
-
-  accelerator_mods &= EGG_VIRTUAL_MODIFIER_MASK;
-
-  if (!accelerator_key)
-    {
-      str = g_strdup_printf ("0x%02x", keycode);
-      keyval_name = str;
-    }
-  else
-    {
-      keyval_name = gdk_keyval_name (gdk_keyval_to_lower (accelerator_key));
-      if (!keyval_name)
-        keyval_name = "";
-    }
-
-  l = 0;
-  if (accelerator_mods & EGG_VIRTUAL_RELEASE_MASK)
-    l += sizeof (text_release) - 1;
-  if (accelerator_mods & EGG_VIRTUAL_SHIFT_MASK)
-    l += sizeof (text_shift) - 1;
-  if (accelerator_mods & EGG_VIRTUAL_CONTROL_MASK)
-    l += sizeof (text_control) - 1;
-  if (accelerator_mods & EGG_VIRTUAL_ALT_MASK)
-    l += sizeof (text_mod1) - 1;
-  if (accelerator_mods & EGG_VIRTUAL_MOD2_MASK)
-    l += sizeof (text_mod2) - 1;
-  if (accelerator_mods & EGG_VIRTUAL_MOD3_MASK)
-    l += sizeof (text_mod3) - 1;
-  if (accelerator_mods & EGG_VIRTUAL_MOD4_MASK)
-    l += sizeof (text_mod4) - 1;
-  if (accelerator_mods & EGG_VIRTUAL_MOD5_MASK)
-    l += sizeof (text_mod5) - 1;
-  if (accelerator_mods & EGG_VIRTUAL_META_MASK)
-    l += sizeof (text_meta) - 1;
-  if (accelerator_mods & EGG_VIRTUAL_HYPER_MASK)
-    l += sizeof (text_hyper) - 1;
-  if (accelerator_mods & EGG_VIRTUAL_SUPER_MASK)
-    l += sizeof (text_super) - 1;
-  l += strlen (keyval_name);
-
-  accelerator = g_new (gchar, l + 1);
-
-  l = 0;
-  accelerator[l] = 0;
-  if (accelerator_mods & EGG_VIRTUAL_RELEASE_MASK)
-    {
-      strcpy (accelerator + l, text_release);
-      l += sizeof (text_release) - 1;
-    }
-  if (accelerator_mods & EGG_VIRTUAL_SHIFT_MASK)
-    {
-      strcpy (accelerator + l, text_shift);
-      l += sizeof (text_shift) - 1;
-    }
-  if (accelerator_mods & EGG_VIRTUAL_CONTROL_MASK)
-    {
-      strcpy (accelerator + l, text_control);
-      l += sizeof (text_control) - 1;
-    }
-  if (accelerator_mods & EGG_VIRTUAL_ALT_MASK)
-    {
-      strcpy (accelerator + l, text_mod1);
-      l += sizeof (text_mod1) - 1;
-    }
-  if (accelerator_mods & EGG_VIRTUAL_MOD2_MASK)
-    {
-      strcpy (accelerator + l, text_mod2);
-      l += sizeof (text_mod2) - 1;
-    }
-  if (accelerator_mods & EGG_VIRTUAL_MOD3_MASK)
-    {
-      strcpy (accelerator + l, text_mod3);
-      l += sizeof (text_mod3) - 1;
-    }
-  if (accelerator_mods & EGG_VIRTUAL_MOD4_MASK)
-    {
-      strcpy (accelerator + l, text_mod4);
-      l += sizeof (text_mod4) - 1;
-    }
-  if (accelerator_mods & EGG_VIRTUAL_MOD5_MASK)
-    {
-      strcpy (accelerator + l, text_mod5);
-      l += sizeof (text_mod5) - 1;
-    }
-  if (accelerator_mods & EGG_VIRTUAL_META_MASK)
-    {
-      strcpy (accelerator + l, text_meta);
-      l += sizeof (text_meta) - 1;
-    }
-  if (accelerator_mods & EGG_VIRTUAL_HYPER_MASK)
-    {
-      strcpy (accelerator + l, text_hyper);
-      l += sizeof (text_hyper) - 1;
-    }
-  if (accelerator_mods & EGG_VIRTUAL_SUPER_MASK)
-    {
-      strcpy (accelerator + l, text_super);
-      l += sizeof (text_super) - 1;
-    }
-
-  strcpy (accelerator + l, keyval_name);
-  g_free (str);
-
-  return accelerator;
-}
-
-/**
- * egg_virtual_accelerator_label:
- * @accelerator_key:  accelerator keyval
- * @accelerator_mods: accelerator modifier mask
- * @returns:          a newly-allocated accelerator label
- *
- * Converts an accelerator keyval and modifier mask
- * into a (possibly translated) string that can be displayed to
- * a user.
- * For example, if you pass in #GDK_q and #EGG_VIRTUAL_CONTROL_MASK,
- * and you use a German locale, this function returns "Strg+Q".
- *
- * The caller of this function must free the returned string.
- */
-gchar*
-egg_virtual_accelerator_label (guint                  accelerator_key,
-			       guint		      keycode,
-			       EggVirtualModifierType accelerator_mods)
-{
-  gchar *gtk_label;
-  GdkModifierType gdkmods;
-
-  egg_keymap_resolve_virtual_modifiers (gdk_keymap_get_default (),
-					accelerator_mods, &gdkmods);
-  gtk_label = gtk_accelerator_get_label (accelerator_key, gdkmods);
-
-  if (!accelerator_key)
-    {
-	gchar *label;
-	label = g_strdup_printf ("%s0x%02x", gtk_label, keycode);
-	g_free (gtk_label);
-	return label;
-    }
-
-  return gtk_label;
-}
-
-void
-egg_keymap_resolve_virtual_modifiers (GdkKeymap              *keymap,
-                                      EggVirtualModifierType  virtual_mods,
-                                      GdkModifierType        *concrete_mods)
-{
-  GdkModifierType concrete;
-  int i;
-  const EggModmap *modmap;
-
-  g_return_if_fail (GDK_IS_KEYMAP (keymap));
-  g_return_if_fail (concrete_mods != NULL);
-
-  modmap = egg_keymap_get_modmap (keymap);
-
-  /* Not so sure about this algorithm. */
-
-  concrete = 0;
-  i = 0;
-  while (i < EGG_MODMAP_ENTRY_LAST)
-    {
-      if (modmap->mapping[i] & virtual_mods)
-        concrete |= (1 << i);
-
-      ++i;
-    }
-
-  *concrete_mods = concrete;
-}
-
-void
-egg_keymap_virtualize_modifiers (GdkKeymap              *keymap,
-                                 GdkModifierType         concrete_mods,
-                                 EggVirtualModifierType *virtual_mods)
-{
-  GdkModifierType virtual;
-  int i;
-  const EggModmap *modmap;
-
-  g_return_if_fail (GDK_IS_KEYMAP (keymap));
-  g_return_if_fail (virtual_mods != NULL);
-
-  modmap = egg_keymap_get_modmap (keymap);
-
-  /* Not so sure about this algorithm. */
-
-  virtual = 0;
-  i = 0;
-  while (i < EGG_MODMAP_ENTRY_LAST)
-    {
-      if ((1 << i) & concrete_mods)
-        {
-          EggVirtualModifierType cleaned;
-
-          cleaned = modmap->mapping[i] & ~(EGG_VIRTUAL_MOD2_MASK |
-                                           EGG_VIRTUAL_MOD3_MASK |
-                                           EGG_VIRTUAL_MOD4_MASK |
-                                           EGG_VIRTUAL_MOD5_MASK);
-
-          if (cleaned != 0)
-            {
-              virtual |= cleaned;
-            }
-          else
-            {
-              /* Rather than dropping mod2->mod5 if not bound,
-               * go ahead and use the concrete names
-               */
-              virtual |= modmap->mapping[i];
-            }
-        }
-
-      ++i;
-    }
-
-  *virtual_mods = virtual;
-}
-
-static void
-reload_modmap (GdkKeymap *keymap,
-               EggModmap *modmap)
-{
-  XModifierKeymap *xmodmap;
-  int map_size;
-  int i;
-
-  /* FIXME multihead */
-  xmodmap = XGetModifierMapping (gdk_x11_get_default_xdisplay ());
-
-  memset (modmap->mapping, 0, sizeof (modmap->mapping));
-
-  /* there are 8 modifiers, and the first 3 are shift, shift lock,
-   * and control
-   */
-  map_size = 8 * xmodmap->max_keypermod;
-  i = 3 * xmodmap->max_keypermod;
-  while (i < map_size)
-    {
-      /* get the key code at this point in the map,
-       * see if its keysym is one we're interested in
-       */
-      int keycode = xmodmap->modifiermap[i];
-      GdkKeymapKey *keys;
-      guint *keyvals;
-      int n_entries;
-      int j;
-      EggVirtualModifierType mask;
-
-      keys = NULL;
-      keyvals = NULL;
-      n_entries = 0;
-
-      gdk_keymap_get_entries_for_keycode (keymap,
-                                          keycode,
-                                          &keys, &keyvals, &n_entries);
-
-      mask = 0;
-      j = 0;
-      while (j < n_entries)
-        {
-          if (keyvals[j] == GDK_Num_Lock)
-            mask |= EGG_VIRTUAL_NUM_LOCK_MASK;
-          else if (keyvals[j] == GDK_Scroll_Lock)
-            mask |= EGG_VIRTUAL_SCROLL_LOCK_MASK;
-          else if (keyvals[j] == GDK_Meta_L ||
-                   keyvals[j] == GDK_Meta_R)
-            mask |= EGG_VIRTUAL_META_MASK;
-          else if (keyvals[j] == GDK_Hyper_L ||
-                   keyvals[j] == GDK_Hyper_R)
-            mask |= EGG_VIRTUAL_HYPER_MASK;
-          else if (keyvals[j] == GDK_Super_L ||
-                   keyvals[j] == GDK_Super_R)
-            mask |= EGG_VIRTUAL_SUPER_MASK;
-          else if (keyvals[j] == GDK_Mode_switch)
-            mask |= EGG_VIRTUAL_MODE_SWITCH_MASK;
-
-          ++j;
-        }
-
-      /* Mod1Mask is 1 << 3 for example, i.e. the
-       * fourth modifier, i / keyspermod is the modifier
-       * index
-       */
-      modmap->mapping[i/xmodmap->max_keypermod] |= mask;
-
-      g_free (keyvals);
-      g_free (keys);
-
-      ++i;
-    }
-
-  /* Add in the not-really-virtual fixed entries */
-  modmap->mapping[EGG_MODMAP_ENTRY_SHIFT] |= EGG_VIRTUAL_SHIFT_MASK;
-  modmap->mapping[EGG_MODMAP_ENTRY_CONTROL] |= EGG_VIRTUAL_CONTROL_MASK;
-  modmap->mapping[EGG_MODMAP_ENTRY_LOCK] |= EGG_VIRTUAL_LOCK_MASK;
-  modmap->mapping[EGG_MODMAP_ENTRY_MOD1] |= EGG_VIRTUAL_ALT_MASK;
-  modmap->mapping[EGG_MODMAP_ENTRY_MOD2] |= EGG_VIRTUAL_MOD2_MASK;
-  modmap->mapping[EGG_MODMAP_ENTRY_MOD3] |= EGG_VIRTUAL_MOD3_MASK;
-  modmap->mapping[EGG_MODMAP_ENTRY_MOD4] |= EGG_VIRTUAL_MOD4_MASK;
-  modmap->mapping[EGG_MODMAP_ENTRY_MOD5] |= EGG_VIRTUAL_MOD5_MASK;
-
-  XFreeModifiermap (xmodmap);
-}
-
-const EggModmap*
-egg_keymap_get_modmap (GdkKeymap *keymap)
-{
-  EggModmap *modmap;
-
-  /* This is all a hack, much simpler when we can just
-   * modify GDK directly.
-   */
-
-  modmap = g_object_get_data (G_OBJECT (keymap),
-                              "egg-modmap");
-
-  if (modmap == NULL)
-    {
-      modmap = g_new0 (EggModmap, 1);
-
-      /* FIXME modify keymap change events with an event filter
-       * and force a reload if we get one
-       */
-
-      reload_modmap (keymap, modmap);
-
-      g_object_set_data_full (G_OBJECT (keymap),
-                              "egg-modmap",
-                              modmap,
-                              g_free);
-    }
-
-  g_assert (modmap != NULL);
-
-  return modmap;
-}
diff --git a/src/guake/globalhotkeys/eggaccelerators.h b/src/guake/globalhotkeys/eggaccelerators.h
deleted file mode 100644
index c4d545f..0000000
--- a/src/guake/globalhotkeys/eggaccelerators.h
+++ /dev/null
@@ -1,94 +0,0 @@
-/* eggaccelerators.h
- * Copyright (C) 2002  Red Hat, Inc.
- * Developed by Havoc Pennington
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Library General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Library General Public License for more details.
- *
- * You should have received a copy of the GNU Library General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-#ifndef __EGG_ACCELERATORS_H__
-#define __EGG_ACCELERATORS_H__
-
-#include <X11/Xlib.h>
-#include <gtk/gtkaccelgroup.h>
-#include <gdk/gdk.h>
-
-G_BEGIN_DECLS
-
-/* Where a value is also in GdkModifierType we coincide,
- * otherwise we don't overlap.
- */
-typedef enum
-{
-  EGG_VIRTUAL_SHIFT_MASK    = 1 << 0,
-  EGG_VIRTUAL_LOCK_MASK	    = 1 << 1,
-  EGG_VIRTUAL_CONTROL_MASK  = 1 << 2,
-
-  EGG_VIRTUAL_ALT_MASK      = 1 << 3, /* fixed as Mod1 */
-  
-  EGG_VIRTUAL_MOD2_MASK	    = 1 << 4,
-  EGG_VIRTUAL_MOD3_MASK	    = 1 << 5,
-  EGG_VIRTUAL_MOD4_MASK	    = 1 << 6,
-  EGG_VIRTUAL_MOD5_MASK	    = 1 << 7,
-
-#if 0
-  GDK_BUTTON1_MASK  = 1 << 8,
-  GDK_BUTTON2_MASK  = 1 << 9,
-  GDK_BUTTON3_MASK  = 1 << 10,
-  GDK_BUTTON4_MASK  = 1 << 11,
-  GDK_BUTTON5_MASK  = 1 << 12,
-  /* 13, 14 are used by Xkb for the keyboard group */
-#endif
-  
-  EGG_VIRTUAL_META_MASK = 1 << 24,
-  EGG_VIRTUAL_SUPER_MASK = 1 << 25,
-  EGG_VIRTUAL_HYPER_MASK = 1 << 26,
-  EGG_VIRTUAL_MODE_SWITCH_MASK = 1 << 27, 
-  EGG_VIRTUAL_NUM_LOCK_MASK = 1 << 28,
-  EGG_VIRTUAL_SCROLL_LOCK_MASK = 1 << 29,
-
-  /* Also in GdkModifierType */
-  EGG_VIRTUAL_RELEASE_MASK  = 1 << 30,
-
-  /*     28-31 24-27 20-23 16-19 12-15 8-11 4-7 0-3
-   *       7     f     0     0     0    0    f   f
-   */  
-  EGG_VIRTUAL_MODIFIER_MASK = 0x7f0000ff
-
-} EggVirtualModifierType;
-
-gboolean egg_accelerator_parse_virtual        (const gchar            *accelerator,
-                                               guint                  *accelerator_key,
-					       guint                  *keycode,
-                                               EggVirtualModifierType *accelerator_mods);
-void     egg_keymap_resolve_virtual_modifiers (GdkKeymap              *keymap,
-                                               EggVirtualModifierType  virtual_mods,
-                                               GdkModifierType        *concrete_mods);
-void     egg_keymap_virtualize_modifiers      (GdkKeymap              *keymap,
-                                               GdkModifierType         concrete_mods,
-                                               EggVirtualModifierType *virtual_mods);
-
-gchar* egg_virtual_accelerator_name (guint                  accelerator_key,
-				     guint		    keycode,
-                                     EggVirtualModifierType accelerator_mods);
-
-gchar* egg_virtual_accelerator_label (guint                  accelerator_key,
-				      guint		     keycode,
-				      EggVirtualModifierType accelerator_mods);
-
-G_END_DECLS
-
-
-#endif /* __EGG_ACCELERATORS_H__ */
diff --git a/src/guake/globalhotkeys/example.py b/src/guake/globalhotkeys/example.py
deleted file mode 100644
index 7653050..0000000
--- a/src/guake/globalhotkeys/example.py
+++ /dev/null
@@ -1,79 +0,0 @@
-"""
-Copyright (C) 2007 Lincoln de Sousa <lincoln@archlinux-br.org>
-
-This program is free software; you can redistribute it and/or
-modify it under the terms of the GNU General Public License as
-published by the Free Software Foundation; either version 2 of the
-License, or (at your option) any later version.
-
-This program is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-General Public License for more details.
-
-You should have received a copy of the GNU General Public
-License along with this program; if not, write to the
-Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-Boston, MA 02110-1301 USA
-"""
-
-"""
-Globahotkeys test file
-======================
-
-Intro
-~~~~~
-This is a really simple test of globalhotkeys module.
-
-To use this you must compile globalhotkeys module, and run this file with
-python. Please only remember to copy your globalhotkeys.so file to a path
-contained in sys.path (maybe you can use PYTHONPATH).
-
-The module contains only 3 functions, init/bind/unbind and they are very simple
-to use.
-
-What you can not forget?
-~~~~~~~~~~~~~~~~~~~~~~~~
- - Compile your module with debug flag, it will help you find a possible
-   problem.
-
- - Run every test from a terminal, all messages will be displayed there.
-
- - Globalhotkeys module depends on gtk, so if you don't import gtk before call
-   any funcion in that module, you will see some warnings on your terminal =D
-
- - globalhotkeys.init MUST be called before binding/unbinding keys.
-
-
-What shoud happen here?
-~~~~~~~~~~~~~~~~~~~~~~~
-This script is a simple test that initializes globalhotkeys machinery and
-bindings a key to a simple function. So after running this program, you shoud
-se a message 'great =D' or 'bad =('. If every thing goes right, when you press
-the F12 key, you should see ('F12',) on your terminal otherwise, you will see a
-warning saying that binding has failed.
-
-A really important thing is that globalhotkeys.bind returns boolean values, so
-if you want to know if binding works properly, only test this with a simple if.
-
-A cool test
-~~~~~~~~~~~
-if you want to test your program when it shoud say to the user that the binding
-failed, you can simply use this program to bind the key that you're running.
-Because you can bind a key once.
-"""
-import globalhotkeys
-import gtk
-
-
-def hammer(*args):
-    print args
-
-globalhotkeys.init()
-binded = globalhotkeys.GlobalHotkey().bind('F12', hammer)
-if binded:
-    print 'great =D'
-else:
-    print 'bad =('
-
-gtk.main()
diff --git a/src/guake/globalhotkeys/globalhotkeys.c b/src/guake/globalhotkeys/globalhotkeys.c
deleted file mode 100644
index b396636..0000000
--- a/src/guake/globalhotkeys/globalhotkeys.c
+++ /dev/null
@@ -1,310 +0,0 @@
-/* globalhotkeys.c - A python type to handle global X hotkeys
- *
- * Copyright (C) 2008 Lincoln de Sousa <lincoln@minaslivre.org>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of the
- * License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public
- * License along with this program; if not, write to the
- * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
- * Boston, MA 02110-1301 USA
- */
-
-#include <Python.h>
-#include <structmember.h>
-#include <glib.h>
-
-#if HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#if PY_MINOR_VERSION < 5
-#define Py_ssize_t size_t
-#endif
-
-#include "keybinder.h"
-
-typedef struct {
-  PyObject *callback;
-  PyObject *params;
-} CallableObject;
-
-typedef struct {
-  PyObject_HEAD;
-  PyObject *binded;
-} GlobalHotkey;
-
-static void
-caller (char *key, gpointer userdata)
-{
-  PyObject *retval;
-  CallableObject *obj = (CallableObject *) userdata;
-  PyGILState_STATE threadstate;
-
-  threadstate = PyGILState_Ensure ();
-  retval = PyObject_CallObject (obj->callback, obj->params);
-  if (!retval)
-    PyErr_Print ();
-  else
-    Py_DECREF (retval);
-  PyGILState_Release (threadstate);
-}
-
-/* -- GlobalHotkey methods -- */
-
-static void
-GlobalHotkey_dealloc (GlobalHotkey *self)
-{
-  Py_XDECREF (self->binded);
-  self->ob_type->tp_free ((PyObject *) self);
-}
-
-static PyObject *
-GlobalHotkey_new (PyTypeObject *type,
-                  PyObject     *args,
-                  PyObject     *kwargs)
-{
-  GlobalHotkey *self;
-
-  self = (GlobalHotkey *) type->tp_alloc (type, 0);
-  if (self != NULL)
-    {
-      self->binded = PyDict_New ();
-      if (self->binded == NULL)
-        {
-          Py_DECREF (self);
-          return NULL;
-        }
-    }
-  return (PyObject *) self;
-}
-
-static PyObject *
-GlobalHotkey_init (GlobalHotkey *self,
-                   PyObject     *args,
-                   PyObject     *kwargs)
-{
-  PyObject *binded = NULL;
-
-  binded = PyDict_New ();
-  Py_INCREF (binded);
-  self->binded = binded;
-
-  return Py_BuildValue ("i", 1);
-}
-
-static PyObject *
-GlobalHotkey_get_all_binded (GlobalHotkey *self)
-{
-  if (self->binded == NULL)
-    {
-      PyErr_SetString (PyExc_AttributeError, "binded");
-      return NULL;
-    }
-  return self->binded;
-}
-
-static PyObject *
-GlobalHotkey_unbind_all (GlobalHotkey *self)
-{
-  PyObject *key, *value;
-  Py_ssize_t pos = 0;
-  char *str_key;
-
-  while (PyDict_Next (self->binded, &pos, &key, &value))
-    {
-      str_key = PyString_AsString (key);
-      keybinder_unbind (str_key, caller);
-    }
-
-  PyDict_Clear (self->binded);
-  return Py_BuildValue ("i", 1);
-}
-
-static PyObject *
-GlobalHotkey_unbind (GlobalHotkey *self,
-                     PyObject     *args)
-{
-  char *key;
-
-  if (!PyArg_ParseTuple (args, "s", &key))
-    return NULL;
-
-  keybinder_unbind (key, caller);
-  PyDict_DelItemString (self->binded, key);
-  return Py_BuildValue ("");
-}
-
-static PyObject *
-GlobalHotkey_bind (GlobalHotkey *self,
-                   PyObject     *args)
-{
-  const char *key;
-  PyObject *extra;
-  PyObject *tmp;
-  CallableObject *co;
-
-  extra = NULL;
-  tmp = NULL;
-  co = malloc (sizeof (CallableObject));
-
-  co->callback = NULL;
-  co->params = PyTuple_New (extra ? 2 : 1);
-
-  if (!PyArg_ParseTuple (args, "sO|O", &key, &tmp, &extra))
-    return NULL;
-
-  Py_INCREF (tmp);
-  co->callback = tmp;
-
-  /* Already binded keys should be unbinded before binding again */
-  if (PyDict_GetItemString (self->binded, key) != NULL)
-    PyErr_Format (PyExc_Exception, "Key %s already binded", key);
-
-  PyTuple_SetItem (co->params, 0, PyString_FromString (key));
-  if (extra)
-    PyTuple_SetItem (co->params, 1, extra);
-
-  /* Is it a valid python callback? */
-  if (PyCallable_Check (co->callback))
-    {
-      /* Let's try to bind the key, if it is not possible, a False
-         python value is returned. */
-      if (keybinder_bind (key, caller, co))
-        {
-          /* If it is not possible to add the entry to the binded
-             dict, we should not bind the key */
-          if (PyDict_SetItemString (self->binded, key, co->callback) != 0)
-            {
-              keybinder_unbind (key, caller);
-              return Py_BuildValue ("i", 0);
-            }
-          else
-            return Py_BuildValue ("i", 1);
-        }
-      else
-        return Py_BuildValue ("i", 0);
-    }
-
-  PyErr_SetString (PyExc_TypeError, "First param must be callable.");
-  Py_DECREF (extra);
-
-  return NULL;
-}
-
-static PyObject *
-GlobalHotkey_get_current_event_time (GlobalHotkey *self)
-{
-  guint32 ret = keybinder_get_current_event_time ();
-  // "I" means "unsigned integer"
-  return Py_BuildValue ("I", ret);
-}
-
-static struct PyMemberDef GlobalHotkey_members[] = {
-  {"binded", T_OBJECT_EX, offsetof (GlobalHotkey, binded), 0,
-   "Already binded hotkeys"},
-
-  {NULL}                        /* Sentinel */
-};
-
-static PyMethodDef GlobalHotkey_methods[] = {
-  {"get_all_binded", (PyCFunction) GlobalHotkey_get_all_binded,
-   METH_NOARGS, "Returns a dict with all binded hotkeys"},
-
-  {"unbind_all", (PyCFunction) GlobalHotkey_unbind_all,
-   METH_NOARGS, "Unbind all binded keys"},
-
-  {"unbind", (PyCFunction) GlobalHotkey_unbind,
-   METH_VARARGS, "Unbind a binded key"},
-
-  {"bind", (PyCFunction) GlobalHotkey_bind,
-   METH_VARARGS, "Bind a key to a callable object"},
-
-  {"get_current_event_time", (PyCFunction) GlobalHotkey_get_current_event_time,
-   METH_NOARGS, "Returns the timestamp of the current event"},
-
-  {NULL}                        /* sentinel */
-};
-
-static PyTypeObject GlobalHotkeyType = {
-  PyObject_HEAD_INIT(NULL)
-  0,                                        /* ob_size */
-  "globalhotkeys.GlobalHotkey",              /* tp_name */
-  sizeof (GlobalHotkey),                    /* tp_basicsize */
-  0,                                        /* tp_itemsize */
-  (destructor) GlobalHotkey_dealloc,        /* tp_dealloc */
-  0,                                        /* tp_print */
-  0,                                        /* tp_getattr */
-  0,                                        /* tp_setattr */
-  0,                                        /* tp_compare */
-  0,                                        /* tp_repr */
-  0,                                        /* tp_as_number */
-  0,                                        /* tp_as_sequence */
-  0,                                        /* tp_as_mapping */
-  0,                                        /* tp_hash */
-  0,                                        /* tp_call */
-  0,                                        /* tp_str */
-  0,                                        /* tp_getattro */
-  0,                                        /* tp_setattro */
-  0,                                        /* tp_as_buffer */
-  Py_TPFLAGS_DEFAULT,                       /* tp_flags */
-  "GlobalHotkey Objects",                   /* tp_doc */
-  0,                                        /* tp_traverse */
-  0,                                        /* tp_clear */
-  0,                                        /* tp_richcompare */
-  0,                                        /* tp_weaklistoffset */
-  0,                                        /* tp_iter */
-  0,                                        /* tp_iternext */
-  GlobalHotkey_methods,                     /* tp_methods */
-  GlobalHotkey_members,                     /* tp_members */
-  0,                                        /* tp_getset */
-  0,                                        /* tp_base */
-  0,                                        /* tp_dict */
-  0,                                        /* tp_descr_get */
-  0,                                        /* tp_descr_set */
-  0,                                        /* tp_dictoffset */
-  (initproc) GlobalHotkey_init,             /* tp_init */
-  0,                                        /* tp_alloc */
-  GlobalHotkey_new,                         /* tp_new */
-};
-
-static PyObject *
-module_init (PyObject *self,
-             PyObject *args)
-{
-  keybinder_init ();
-  return Py_BuildValue ("");
-}
-
-static PyMethodDef module_methods[] = {
-  {"init", (PyCFunction) module_init, METH_NOARGS, ""},
-  {NULL},                       /* Sentinel */
-};
-
-#ifndef PyMODINIT_FUNC
-#define PyMODINIT_FUNC void
-#endif
-
-PyMODINIT_FUNC
-initglobalhotkeys (void)
-{
-  PyObject *m;
-
-  GlobalHotkeyType.tp_new = PyType_GenericNew;
-  if (PyType_Ready (&GlobalHotkeyType) < 0)
-    return;
-
-  m = Py_InitModule3 ("globalhotkeys", module_methods,
-                      "Global hotkey manager for X.");
-
-  Py_INCREF (&GlobalHotkeyType);
-  PyModule_AddObject (m, "GlobalHotkey", (PyObject *) &GlobalHotkeyType);
-}
diff --git a/src/guake/globalhotkeys/keybinder.c b/src/guake/globalhotkeys/keybinder.c
deleted file mode 100644
index 3bf5380..0000000
--- a/src/guake/globalhotkeys/keybinder.c
+++ /dev/null
@@ -1,331 +0,0 @@
-/*
- * This code was original written by Alex Graveley for Tomboy 
- * (http://www.beatniksoftware.com/tomboy), which is also 
- * LGPL program. Thanks to him.
- *
- *  - 14/05/2007 - Lincoln de Sousa <lincoln@archlinux-br.org>
- *
- *    changing keybinder_bind return type from void to gboolean.
- */
-
-#include <gdk/gdk.h>
-#include <gdk/gdkwindow.h>
-#include <gdk/gdkx.h>
-#include <string.h>
-#include <X11/Xlib.h>
-
-#include "eggaccelerators.h"
-#include "keybinder.h"
-
-/* Uncomment the next line to print a debug trace. */
-/* #define DEBUG */
-
-#ifdef DEBUG
-#  define TRACE(x) x
-#else
-#  define TRACE(x) do {} while (FALSE);
-#endif
-
-typedef struct _Binding {
-	BindkeyHandler  handler;
-	gpointer              user_data;
-	char                 *keystring;
-	uint                  keycode;
-	uint                  modifiers;
-} Binding;
-
-static GSList *bindings = NULL;
-static guint32 last_event_time = 0;
-static gboolean processing_event = FALSE;
-
-static guint num_lock_mask, caps_lock_mask, scroll_lock_mask;
-
-static void
-lookup_ignorable_modifiers (GdkKeymap *keymap)
-{
-	egg_keymap_resolve_virtual_modifiers (keymap, 
-					      EGG_VIRTUAL_LOCK_MASK,
-					      &caps_lock_mask);
-
-	egg_keymap_resolve_virtual_modifiers (keymap, 
-					      EGG_VIRTUAL_NUM_LOCK_MASK,
-					      &num_lock_mask);
-
-	egg_keymap_resolve_virtual_modifiers (keymap, 
-					      EGG_VIRTUAL_SCROLL_LOCK_MASK,
-					      &scroll_lock_mask);
-}
-
-static void
-grab_ungrab_with_ignorable_modifiers (GdkWindow *rootwin, 
-				      Binding   *binding,
-				      gboolean   grab)
-{
-	guint mod_masks [] = {
-		0, /* modifier only */
-		num_lock_mask,
-		caps_lock_mask,
-		scroll_lock_mask,
-		num_lock_mask  | caps_lock_mask,
-		num_lock_mask  | scroll_lock_mask,
-		caps_lock_mask | scroll_lock_mask,
-		num_lock_mask  | caps_lock_mask | scroll_lock_mask,
-	};
-	int i;
-
-	for (i = 0; i < G_N_ELEMENTS (mod_masks); i++) {
-		if (grab) {
-			XGrabKey (GDK_WINDOW_XDISPLAY (rootwin), 
-				  binding->keycode, 
-				  binding->modifiers | mod_masks [i], 
-				  GDK_WINDOW_XWINDOW (rootwin), 
-				  False, 
-				  GrabModeAsync,
-				  GrabModeAsync);
-		} else {
-			XUngrabKey (GDK_WINDOW_XDISPLAY (rootwin),
-				    binding->keycode,
-				    binding->modifiers | mod_masks [i], 
-				    GDK_WINDOW_XWINDOW (rootwin));
-		}
-	}
-}
-
-static gboolean 
-do_grab_key (Binding *binding)
-{
-	GdkKeymap *keymap = gdk_keymap_get_default ();
-	GdkWindow *rootwin = gdk_get_default_root_window ();
-
-	EggVirtualModifierType virtual_mods = 0;
-	guint keysym = 0;
-
-	if (keymap == NULL || rootwin == NULL)
-		return FALSE;
-
-	if (!egg_accelerator_parse_virtual (binding->keystring, 
-					    &keysym, 0,
-					    &virtual_mods))
-		return FALSE;
-
-	TRACE (g_print ("Got accel %d, %d\n", keysym, virtual_mods));
-
-	binding->keycode = XKeysymToKeycode (GDK_WINDOW_XDISPLAY (rootwin), 
-					     keysym);
-	if (binding->keycode == 0)
-		return FALSE;
-
-	TRACE (g_print ("Got keycode %d\n", binding->keycode));
-
-	egg_keymap_resolve_virtual_modifiers (keymap,
-					      virtual_mods,
-					      &binding->modifiers);
-
-	TRACE (g_print ("Got modmask %d\n", binding->modifiers));
-
-	gdk_error_trap_push ();
-
-	grab_ungrab_with_ignorable_modifiers (rootwin, 
-					      binding, 
-					      TRUE /* grab */);
-
-	gdk_flush ();
-
-	if (gdk_error_trap_pop ()) {
-	   g_warning ("Binding '%s' failed!\n", binding->keystring);
-	   return FALSE;
-	}
-
-	return TRUE;
-}
-
-static gboolean 
-do_ungrab_key (Binding *binding)
-{
-	GdkWindow *rootwin = gdk_get_default_root_window ();
-
-	TRACE (g_print ("Removing grab for '%s'\n", binding->keystring));
-
-	grab_ungrab_with_ignorable_modifiers (rootwin, 
-					      binding, 
-					      FALSE /* ungrab */);
-
-	return TRUE;
-}
-
-static GdkFilterReturn
-filter_func (GdkXEvent *gdk_xevent, GdkEvent *event, gpointer data)
-{
-	GdkFilterReturn return_val = GDK_FILTER_CONTINUE;
-	XEvent *xevent = (XEvent *) gdk_xevent;
-	guint event_mods;
-	GSList *iter;
-
-	TRACE (g_print ("Got Event! %d, %d\n", xevent->type, event->type));
-
-	switch (xevent->type) {
-	case KeyPress:
-		TRACE (g_print ("Got KeyPress! keycode: %d, modifiers: %d\n", 
-				xevent->xkey.keycode, 
-				xevent->xkey.state));
-
-		/* 
-		 * Set the last event time for use when showing
-		 * windows to avoid anti-focus-stealing code.
-		 */
-		processing_event = TRUE;
-		last_event_time = xevent->xkey.time;
-
-		event_mods = xevent->xkey.state & ~(num_lock_mask  | 
-						    caps_lock_mask | 
-						    scroll_lock_mask);
-
-		for (iter = bindings; iter != NULL; iter = iter->next) {
-			Binding *binding = (Binding *) iter->data;
-						       
-			if (binding->keycode == xevent->xkey.keycode &&
-			    binding->modifiers == event_mods) {
-
-				TRACE (g_print ("Calling handler for '%s'...\n", 
-						binding->keystring));
-
-				(binding->handler) (binding->keystring, 
-						    binding->user_data);
-			}
-		}
-
-		processing_event = FALSE;
-		break;
-	case KeyRelease:
-		TRACE (g_print ("Got KeyRelease! \n"));
-		break;
-	}
-
-	return return_val;
-}
-
-static void 
-keymap_changed (GdkKeymap *map)
-{
-	GdkKeymap *keymap = gdk_keymap_get_default ();
-	GSList *iter;
-
-	TRACE (g_print ("Keymap changed! Regrabbing keys..."));
-
-	for (iter = bindings; iter != NULL; iter = iter->next) {
-		Binding *binding = (Binding *) iter->data;
-		do_ungrab_key (binding);
-	}
-
-	lookup_ignorable_modifiers (keymap);
-
-	for (iter = bindings; iter != NULL; iter = iter->next) {
-		Binding *binding = (Binding *) iter->data;
-		do_grab_key (binding);
-	}
-}
-
-void 
-keybinder_init (void)
-{
-	GdkKeymap *keymap = gdk_keymap_get_default ();
-	GdkWindow *rootwin = gdk_get_default_root_window ();
-
-	lookup_ignorable_modifiers (keymap);
-
-	gdk_window_add_filter (rootwin, 
-			       filter_func, 
-			       NULL);
-
-	g_signal_connect (keymap, 
-			  "keys_changed",
-			  G_CALLBACK (keymap_changed),
-			  NULL);
-}
-
-gboolean
-keybinder_bind (const char           *keystring,
-		       BindkeyHandler  handler,
-		       gpointer              user_data)
-{
-	Binding *binding;
-	gboolean success;
-
-	binding = g_new0 (Binding, 1);
-	binding->keystring = g_strdup (keystring);
-	binding->handler = handler;
-	binding->user_data = user_data;
-
-	/* Sets the binding's keycode and modifiers */
-	success = do_grab_key (binding);
-
-	if (success) {
-		bindings = g_slist_prepend (bindings, binding);
-                return TRUE;
-	} else {
-		g_free (binding->keystring);
-		g_free (binding);
-                return FALSE;
-	}
-}
-
-void
-keybinder_unbind (const char           *keystring, 
-			 BindkeyHandler  handler)
-{
-	GSList *iter;
-
-	for (iter = bindings; iter != NULL; iter = iter->next) {
-		Binding *binding = (Binding *) iter->data;
-
-		if (strcmp (keystring, binding->keystring) != 0 ||
-		    handler != binding->handler) 
-			continue;
-
-		do_ungrab_key (binding);
-
-		bindings = g_slist_remove (bindings, binding);
-
-		g_free (binding->keystring);
-		g_free (binding);
-		break;
-	}
-}
-
-/* 
- * From eggcellrenderkeys.c.
- */
-gboolean
-keybinder_is_modifier (guint keycode)
-{
-	gint i;
-	gint map_size;
-	XModifierKeymap *mod_keymap;
-	gboolean retval = FALSE;
-
-	mod_keymap = XGetModifierMapping (gdk_display);
-
-	map_size = 8 * mod_keymap->max_keypermod;
-
-	i = 0;
-	while (i < map_size) {
-		if (keycode == mod_keymap->modifiermap[i]) {
-			retval = TRUE;
-			break;
-		}
-		++i;
-	}
-
-	XFreeModifiermap (mod_keymap);
-
-	return retval;
-}
-
-guint32
-keybinder_get_current_event_time (void)
-{
-	if (processing_event) 
-		return last_event_time;
-	else
-		return GDK_CURRENT_TIME;
-}
diff --git a/src/guake/globalhotkeys/keybinder.h b/src/guake/globalhotkeys/keybinder.h
deleted file mode 100644
index 69a50c0..0000000
--- a/src/guake/globalhotkeys/keybinder.h
+++ /dev/null
@@ -1,27 +0,0 @@
-
-#ifndef __KEY_BINDER_H__
-#define __KEY_BINDER_H__
-
-#include <glib.h>
-
-G_BEGIN_DECLS
-
-typedef void (* BindkeyHandler) (char *keystring, gpointer user_data);
-
-void keybinder_init   (void);
-
-gboolean keybinder_bind   (const char           *keystring,
-			      BindkeyHandler  handler,
-			      gpointer              user_data);
-
-void keybinder_unbind (const char           *keystring,
-			      BindkeyHandler  handler);
-
-gboolean keybinder_is_modifier (guint keycode);
-
-guint32 keybinder_get_current_event_time (void);
-
-G_END_DECLS
-
-#endif /* __KEY_BINDER_H__ */
-
diff --git a/src/guake/globalhotkeys/testbinding.c b/src/guake/globalhotkeys/testbinding.c
deleted file mode 100644
index 3a70eda..0000000
--- a/src/guake/globalhotkeys/testbinding.c
+++ /dev/null
@@ -1,89 +0,0 @@
-/*
- * Copyright (C) 2007 Lincoln de Sousa <lincoln@archlinux-br.org>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of the
- * License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public
- * License along with this program; if not, write to the
- * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
- * Boston, MA 02110-1301 USA
- */
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include "keybinder.h"
-
-#include <gtk/gtk.h>
-
-typedef struct _BindedKey BindedKey;
-struct _BindedKey
-{
-  char *key;
-  void *callback;
-};
-
-void
-handler (char *keystring, gpointer user_data)
-{
-  printf ("binded key: %s\n", keystring);
-}
-
-void
-unbind (GtkWidget *bnt, BindedKey *b)
-{
-  keybinder_unbind (b->key, b->callback);
-  printf ("unbinded\n");
-}
-
-int
-main (int argc, char **argv)
-{
-  GtkWidget *window;
-  GtkWidget *label;
-  GtkWidget *vbox;
-  GtkWidget *button;
-  BindedKey *binded = malloc (sizeof (BindedKey *));
-
-  gtk_init (&argc, &argv);
-
-  binded->key = strdup ("<Ctrl><Alt>e");
-  binded->callback = handler;
-
-  keybinder_bind ("<Ctrl><Alt>e", handler, NULL);
-  keybinder_init ();
-
-  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
-  gtk_window_set_position (GTK_WINDOW (window), GTK_WIN_POS_CENTER);
-  gtk_container_set_border_width (GTK_CONTAINER (window), 10);
-  g_signal_connect (G_OBJECT (window), "delete_event",
-      G_CALLBACK (exit), 0);
-
-  label = gtk_label_new (NULL);
-  gtk_label_set_markup (GTK_LABEL (label),
-      "<big>Pres <b>&lt;Ctrl&gt;&lt;Alt&gt;e</b> and "
-      "see what is happening in your terminal =D</big>");
-
-  button = gtk_button_new_with_label ("Unbind Key!");
-  g_signal_connect (G_OBJECT (button), "clicked",  G_CALLBACK (unbind),
-      binded);
-
-  vbox = gtk_vbox_new (1, 10);
-  gtk_box_pack_start (GTK_BOX (vbox), label, 1, 1, 0);
-  gtk_box_pack_start (GTK_BOX (vbox), button, 1, 1, 0);
-
-  gtk_container_add (GTK_CONTAINER (window), vbox);
-
-  gtk_widget_show_all (window);
-  gtk_main ();
-
-  return 0;
-}
diff --git a/src/guake/guake_app.py b/src/guake/guake_app.py
index 9b89c33..12356ba 100644
--- a/src/guake/guake_app.py
+++ b/src/guake/guake_app.py
@@ -45,7 +45,7 @@
 from xdg.DesktopEntry import DesktopEntry
 from xml.sax.saxutils import escape as xml_escape
 
-import guake.globalhotkeys
+import keybinder
 import guake.notifier
 
 from guake.about import AboutDialog
@@ -157,9 +157,6 @@ def __init__(self):
         self.debug_mode = self.client.get_bool(KEY('/general/debug_mode'))
         self.setupLogging()
 
-        # setting global hotkey and showing a pretty notification =)
-        guake.globalhotkeys.init()
-
         # Cannot use "getattr(gtk.Window().get_style(), "base")[int(gtk.STATE_SELECTED)]"
         # since theme has not been applied before first show_all
         self.selected_color = None
@@ -305,7 +302,7 @@ def window_event(*args):
         # loading and setting up configuration stuff
         GConfHandler(self)
         GConfKeyHandler(self)
-        self.hotkeys = guake.globalhotkeys.GlobalHotkey()
+        self.hotkeys = keybinder
         self.load_config()
 
         key = self.client.get_string(GKEY('show_hide'))
@@ -574,7 +571,9 @@ def show_prefs(self, *args):
         Preferences window.
         """
         self.hide()
-        PrefsDialog().show()
+        prefsdialog = PrefsDialog()
+        prefsdialog.set_keybinder(keybinder)
+        prefsdialog.show()
 
     def is_iconified(self):
         if self.window.window:
diff --git a/src/guake/prefs.py b/src/guake/prefs.py
index 341d9dd..67d47fa 100644
--- a/src/guake/prefs.py
+++ b/src/guake/prefs.py
@@ -951,6 +951,9 @@ def populate_display_n(self):
 
     # -- key handling --
 
+    def set_keybinder(self, keybinder):
+        self.keybinder = keybinder
+
     def on_key_edited(self, renderer, path, keycode, mask, keyval, model):
         """Callback that handles key edition in cellrenderer. It makes
         some tests to validate the key, like looking for already in
@@ -1002,6 +1005,10 @@ def each_key(model, path, subiter):
         giter = model.get_iter(path)
         model.set_value(giter, 2, hotkey)
 
+	# unbind previous key if it's the show/hide key
+        if(gconf_path == "/apps/guake/keybindings/global/show_hide"):
+	    self.keybinder.unbind(self.client.get_string(gconf_path))
+
         # setting the new value in gconf
         self.client.set_string(gconf_path, key)
 

From 66bc372366291863a42e9690d9d333098e852076 Mon Sep 17 00:00:00 2001
From: Jacob Jenner Rasmussen <jacob@jener.dk>
Date: Wed, 3 Jun 2015 21:02:47 +0200
Subject: [PATCH 2/5] fixes incorrect indentation

---
 src/guake/prefs.py | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/guake/prefs.py b/src/guake/prefs.py
index 67d47fa..55bc3a5 100644
--- a/src/guake/prefs.py
+++ b/src/guake/prefs.py
@@ -1005,9 +1005,9 @@ def each_key(model, path, subiter):
         giter = model.get_iter(path)
         model.set_value(giter, 2, hotkey)
 
-	# unbind previous key if it's the show/hide key
+        # unbind previous key if it's the show/hide key
         if(gconf_path == "/apps/guake/keybindings/global/show_hide"):
-	    self.keybinder.unbind(self.client.get_string(gconf_path))
+            self.keybinder.unbind(self.client.get_string(gconf_path))
 
         # setting the new value in gconf
         self.client.set_string(gconf_path, key)

From 008693e5ec5777ef72e878d5b426445c31ba26b1 Mon Sep 17 00:00:00 2001
From: Gaetan Semet <gaetan@xeberon.net>
Date: Fri, 5 Jun 2015 10:24:34 +0200
Subject: [PATCH 5/5] import reordering

Signed-off-by: Gaetan Semet <gaetan@xeberon.net>
---
 src/guake/guake_app.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/guake/guake_app.py b/src/guake/guake_app.py
index 12356ba..ae25573 100644
--- a/src/guake/guake_app.py
+++ b/src/guake/guake_app.py
@@ -45,8 +45,8 @@
 from xdg.DesktopEntry import DesktopEntry
 from xml.sax.saxutils import escape as xml_escape
 
-import keybinder
 import guake.notifier
+import keybinder
 
 from guake.about import AboutDialog
 from guake.common import _
