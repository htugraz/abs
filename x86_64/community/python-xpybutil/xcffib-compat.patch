commit 78424375f3733394f84f8b4b6663f961402951ff
Author: Felix Yan <felixonmars@archlinux.org>
Date:   Wed Sep 16 17:13:46 2015 +0800

    Add support for xcffib

diff --git a/examples/window-marker.py b/examples/window-marker.py
index e345656..01f3998 100644
--- a/examples/window-marker.py
+++ b/examples/window-marker.py
@@ -3,7 +3,7 @@
 import argparse
 import sys
 
-import xcb.xproto
+from xpybutil.compat import xproto
 
 import xpybutil
 import xpybutil.event as event
@@ -54,7 +54,7 @@ def do_goto_window(letter):
         if wdesk is not None and wdesk not in visibles:
             ewmh.request_current_desktop_checked(wdesk).check()
         ewmh.request_active_window_checked(wid, source=1).check()
-    except xcb.xproto.BadWindow:
+    except xproto.BadWindow:
         print >> sys.stderr, '%d no longer exists' % wid
 
 def mark_window():
@@ -66,7 +66,7 @@ def goto_window():
 def start_get_letter(cb):
     global grabbing
 
-    GS = xcb.xproto.GrabStatus
+    GS = xproto.GrabStatus
     if keybind.grab_keyboard(xpybutil.root).status == GS.Success:
         grabbing = cb
 
diff --git a/setup.py b/setup.py
index 4ea422e..362b6a9 100644
--- a/setup.py
+++ b/setup.py
@@ -1,15 +1,17 @@
+from __future__ import print_function
 import sys
 
 from distutils import sysconfig
 from distutils.core import setup
 
 try:
-    import xcb.xproto, xcb.xcb, xcb.xinerama, xcb.randr
+    from xpybutil.compat import xproto, xinerama, randr
 except:
     print ('')
     print ('xpybutil requires the X Python Binding')
     print ('See: http://cgit.freedesktop.org/xcb/xpyb/')
-    print ('Or xpyb-ng can be used. See', 'https://github.com/dequis/xpyb-ng')
+    print ('More options: xpyb-ng:', 'https://github.com/dequis/xpyb-ng',
+           'and xcffib:', 'https://github.com/tych0/xcffib')
     sys.exit(1)
 
 setup(
diff --git a/xpybutil/__init__.py b/xpybutil/__init__.py
index 8ec1eda..af58027 100644
--- a/xpybutil/__init__.py
+++ b/xpybutil/__init__.py
@@ -1,4 +1,4 @@
-import xcb, xcb.xproto
+from xpybutil.compat import xcb
 
 try:
     conn = xcb.connect()
@@ -6,4 +6,3 @@ try:
 except xcb.ConnectException:
     conn = None
     root = None
-
diff --git a/xpybutil/compat.py b/xpybutil/compat.py
new file mode 100644
index 0000000..66efa58
--- /dev/null
+++ b/xpybutil/compat.py
@@ -0,0 +1,13 @@
+try:
+    import xcffib as xcb
+    import xcffib.xproto as xproto
+    import xcffib.xinerama as xinerama
+    import xcffib.randr as randr
+    import xcffib.render as render
+
+except ImportError:
+    import xcb
+    import xcb.xproto as xproto
+    import xcb.xinerama as xinerama
+    import xcb.randr as randr
+    import xcb.render as render
diff --git a/xpybutil/event.py b/xpybutil/event.py
index c161874..15f636e 100644
--- a/xpybutil/event.py
+++ b/xpybutil/event.py
@@ -8,8 +8,7 @@ import struct
 import sys
 import traceback
 
-import xcb
-import xcb.xproto as xproto
+from xpybutil.compat import xcb, xproto
 
 from xpybutil import conn, root, util
 
diff --git a/xpybutil/ewmh.py b/xpybutil/ewmh.py
index a4f0977..c101555 100644
--- a/xpybutil/ewmh.py
+++ b/xpybutil/ewmh.py
@@ -72,7 +72,7 @@ spec :-)
 """
 import struct
 
-import xcb.xproto
+from xpybutil.compat import xproto
 
 from xpybutil import conn as c, root, event, util
 
@@ -170,9 +170,9 @@ class State:
 atom = util.get_atom
 revent = event.root_send_client_event
 revent_checked = event.root_send_client_event_checked
-ATOM = xcb.xproto.Atom.ATOM
-CARDINAL = xcb.xproto.Atom.CARDINAL
-WINDOW = xcb.xproto.Atom.WINDOW
+ATOM = xproto.Atom.ATOM
+CARDINAL = xproto.Atom.CARDINAL
+WINDOW = xproto.Atom.WINDOW
 
 # Build the atom cache for quicker access
 util.build_atom_cache(__atoms)
@@ -202,13 +202,13 @@ def set_supported(atoms):
     :rtype:         xcb.VoidCookie
     """
     packed = struct.pack('I' * len(atoms), *atoms)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, root,
                                  atom('_NET_SUPPORTED'), ATOM, 32, len(atoms),
                                  packed)
 
 def set_supported_checked(atoms):
     packed = struct.pack('I' * len(atoms), *atoms)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, root,
                                         atom('_NET_SUPPORTED'),
                                         ATOM, 32, len(atoms), packed)
 
@@ -236,13 +236,13 @@ def set_client_list(windows):
     :rtype:         xcb.VoidCookie
     """
     packed = struct.pack('I' * len(windows), *windows)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, root,
                                  atom('_NET_CLIENT_LIST'),
                                  WINDOW, 32, len(windows), packed)
 
 def set_client_list_checked(windows):
     packed = struct.pack('I' * len(windows), *windows)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, root,
                                         atom('_NET_CLIENT_LIST'),
                                         WINDOW, 32, len(windows), packed)
 
@@ -271,13 +271,13 @@ def set_client_list_stacking(windows):
     :rtype:         xcb.VoidCookie
     """
     packed = struct.pack('I' * len(windows), *windows)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, root,
                                  atom('_NET_CLIENT_LIST_STACKING'),
                                  WINDOW, 32, len(windows), packed)
 
 def set_client_list_stacking_checked(windows):
     packed = struct.pack('I' * len(windows), *windows)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, root,
                                  atom('_NET_CLIENT_LIST_STACKING'),
                                  WINDOW, 32, len(windows), packed)
 
@@ -306,13 +306,13 @@ def set_number_of_desktops(number_of_desktops):
     :rtype:                     xcb.VoidCookie
     """
     packed = struct.pack('I', number_of_desktops)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, root,
                                  atom('_NET_NUMBER_OF_DESKTOPS'), CARDINAL, 32,
                                  1, packed)
 
 def set_number_of_desktops_checked(number_of_desktops):
     packed = struct.pack('I', number_of_desktops)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, root,
                                         atom('_NET_NUMBER_OF_DESKTOPS'),
                                         CARDINAL, 32, 1, packed)
 
@@ -368,13 +368,13 @@ def set_desktop_geometry(width, height):
     :rtype:                     xcb.VoidCookie
     """
     packed = struct.pack('II', width, height)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, root,
                                  atom('_NET_DESKTOP_GEOMETRY'), CARDINAL, 32, 2,
                                  packed)
 
 def set_desktop_geometry_checked(width, height):
     packed = struct.pack('II', width, height)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, root,
                                         atom('_NET_DESKTOP_GEOMETRY'),
                                         CARDINAL, 32, 2, packed)
 
@@ -459,7 +459,7 @@ def set_desktop_viewport(pairs):
         flatten.append(pair['y'])
 
     packed = struct.pack('I' * len(flatten), *flatten)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, root,
                                  atom('_NET_DESKTOP_VIEWPORT'),
                                  CARDINAL, 32, len(flatten), packed)
 
@@ -470,7 +470,7 @@ def set_desktop_viewport_checked(pairs):
         flatten.append(pair['y'])
 
     packed = struct.pack('I' * len(flatten), *flatten)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, root,
                                         atom('_NET_DESKTOP_VIEWPORT'),
                                         CARDINAL, 32, len(flatten), packed)
 
@@ -514,18 +514,18 @@ def set_current_desktop(current_desktop):
     :rtype:                     xcb.VoidCookie
     """
     packed = struct.pack('I', current_desktop)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, root,
                                  atom('_NET_CURRENT_DESKTOP'), CARDINAL, 32, 1,
                                  packed)
 
 def set_current_desktop_checked(current_desktop):
     packed = struct.pack('I', current_desktop)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, root,
                                         atom('_NET_CURRENT_DESKTOP'),
                                         CARDINAL, 32, 1, packed)
 
 def request_current_desktop(desktop_number,
-                            timestamp=xcb.xproto.Time.CurrentTime):
+                            timestamp=xproto.Time.CurrentTime):
     """
     Sends event to root window to set the current desktop.
 
@@ -537,7 +537,7 @@ def request_current_desktop(desktop_number,
     return revent(root, '_NET_CURRENT_DESKTOP', desktop_number, timestamp)
 
 def request_current_desktop_checked(desktop_number,
-                                    timestamp=xcb.xproto.Time.CurrentTime):
+                                    timestamp=xproto.Time.CurrentTime):
     return revent_checked(root, '_NET_CURRENT_DESKTOP',
                           desktop_number, timestamp)
 
@@ -568,13 +568,13 @@ def set_visible_desktops(desktops):
     :rtype:          xcb.VoidCookie
     """
     packed = struct.pack('I' * len(desktops), *desktops)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, root,
                                  atom('_NET_VISIBLE_DESKTOPS'),
                                  CARDINAL, 32, len(desktops), packed)
 
 def set_visible_desktops_checked(desktops):
     packed = struct.pack('I' * len(desktops), *desktops)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, root,
                                         atom('_NET_VISIBLE_DESKTOPS'),
                                         CARDINAL, 32, len(desktops), packed)
 
@@ -607,7 +607,7 @@ def set_desktop_names(desktop_names):
         nullterm.append(desktop_name + chr(0))
     nullterm = ''.join(nullterm)
 
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, root,
                                  atom('_NET_DESKTOP_NAMES'),
                                  atom('UTF8_STRING'), 8,
                                  len(nullterm), nullterm)
@@ -619,7 +619,7 @@ def set_desktop_names_checked(desktop_names):
         nullterm.append(desktop_name + chr(0))
     nullterm = ''.join(nullterm)
 
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, root,
                                         atom('_NET_DESKTOP_NAMES'),
                                         atom('UTF8_STRING'), 8,
                                         len(nullterm), nullterm)
@@ -649,18 +649,18 @@ def set_active_window(active):
     :rtype:         xcb.VoidCookie
     """
     packed = struct.pack('I', active)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, root,
                                  atom('_NET_ACTIVE_WINDOW'),
                                  WINDOW, 32, 1, packed)
 
 def set_active_window_checked(active):
     packed = struct.pack('I', active)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, root,
                                         atom('_NET_ACTIVE_WINDOW'),
                                         WINDOW, 32, 1, packed)
 
 def request_active_window(active, source=1,
-                          timestamp=xcb.xproto.Time.CurrentTime,
+                          timestamp=xproto.Time.CurrentTime,
                           current=0):
     """
     Sends event to root window to set the active window.
@@ -675,7 +675,7 @@ def request_active_window(active, source=1,
     return revent(active, '_NET_ACTIVE_WINDOW', source, timestamp, current)
 
 def request_active_window_checked(active, source=1,
-                                  timestamp=xcb.xproto.Time.CurrentTime,
+                                  timestamp=xproto.Time.CurrentTime,
                                   current=0):
     return revent_checked(active, '_NET_ACTIVE_WINDOW', source, timestamp,
                           current)
@@ -730,7 +730,7 @@ def set_workarea(workareas):
         flatten.append(workarea['height'])
     packed = struct.pack('I' * len(flatten), *flatten)
 
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, root,
                                  atom('_NET_WORKAREA'), CARDINAL, 32,
                                  len(flatten), packed)
 
@@ -743,7 +743,7 @@ def set_workarea_checked(workareas):
         flatten.append(workarea['height'])
     packed = struct.pack('I' * len(flatten), *flatten)
 
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, root,
                                         atom('_NET_WORKAREA'), CARDINAL, 32,
                                         len(flatten), packed)
 
@@ -776,13 +776,13 @@ def set_supporting_wm_check(wid, child):
     :rtype:         xcb.VoidCookie
     """
     packed = struct.pack('I', child)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, wid,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, wid,
                                  atom('_NET_SUPPORTING_WM_CHECK'),
                                  WINDOW, 32, 1, packed)
 
 def set_supporting_wm_check_checked(wid, child):
     packed = struct.pack('I', child)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, wid,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, wid,
                                         atom('_NET_SUPPORTING_WM_CHECK'),
                                         WINDOW, 32, 1, packed)
 
@@ -810,13 +810,13 @@ def set_virtual_roots(vroots):
     :rtype:         xcb.VoidCookie
     """
     packed = struct.pack('I' * len(vroots), *vroots)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, root,
                                  atom('_NET_VIRTUAL_ROOTS'),
                                  WINDOW, 32, len(vroots), packed)
 
 def set_virtual_roots_checked(vroots):
     packed = struct.pack('I' * len(vroots), *vroots)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, root,
                                         atom('_NET_VIRTUAL_ROOTS'),
                                         WINDOW, 32, len(vroots), packed)
 
@@ -868,14 +868,14 @@ def set_desktop_layout(orientation, columns, rows,
     :rtype:                     xcb.VoidCookie
     """
     packed = struct.pack('IIII', orientation, columns, rows, starting_corner)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, root,
                                  atom('_NET_DESKTOP_LAYOUT'),
                                  CARDINAL, 32, 4, packed)
 
 def set_desktop_layout_checked(orientation, columns, rows,
                                starting_corner=StartingCorner.TopLeft):
     packed = struct.pack('IIII', orientation, columns, rows, starting_corner)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, root,
                                         atom('_NET_DESKTOP_LAYOUT'),
                                         CARDINAL, 32, 4, packed)
 
@@ -915,12 +915,12 @@ def set_showing_desktop(showing_desktop):
     :type showing_desktop:   CARDINAL/32
     :rtype:                  xcb.VoidCookie
     """
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, root,
                                  atom('_NET_SHOWING_DESKTOP'), CARDINAL, 32, 1,
                                  [showing_desktop])
 
 def set_showing_desktop_checked(showing_desktop):
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, root,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, root,
                                         atom('_NET_SHOWING_DESKTOP'),
                                         CARDINAL, 32, 1, [showing_desktop])
 
@@ -940,7 +940,7 @@ def request_showing_desktop_checked(showing_desktop):
 
 # _NET_CLOSE_WINDOW
 
-def request_close_window(window, timestamp=xcb.xproto.Time.CurrentTime,
+def request_close_window(window, timestamp=xproto.Time.CurrentTime,
                          source=1):
     """
     Sends event to root window to close a window.
@@ -952,7 +952,7 @@ def request_close_window(window, timestamp=xcb.xproto.Time.CurrentTime,
     """
     return revent(window, '_NET_CLOSE_WINDOW', timestamp, source)
 
-def request_close_window_checked(window, timestamp=xcb.xproto.Time.CurrentTime,
+def request_close_window_checked(window, timestamp=xproto.Time.CurrentTime,
                                  source=1):
     return revent_checked(window, '_NET_CLOSE_WINDOW', timestamp, source)
 
@@ -960,7 +960,7 @@ def request_close_window_checked(window, timestamp=xcb.xproto.Time.CurrentTime,
 
 def request_moveresize_window(window, x=None, y=None, width=None,
                               height=None,
-                              gravity=xcb.xproto.Gravity.BitForget, source=1):
+                              gravity=xproto.Gravity.BitForget, source=1):
     """
     Sends event to root window to move/resize a window.
 
@@ -992,7 +992,7 @@ def request_moveresize_window(window, x=None, y=None, width=None,
 
 def request_moveresize_window_checked(window, x=None, y=None, width=None,
                                       height=None,
-                                      gravity=xcb.xproto.Gravity.BitForget,
+                                      gravity=xproto.Gravity.BitForget,
                                       source=1):
     flags = gravity
     flags |= source << 12
@@ -1059,7 +1059,7 @@ def request_wm_moveresize_checked(window, direction, x_root=0, y_root=0,
 
 # _NET_RESTACK_WINDOW
 
-def request_restack_window(window, stack_mode=xcb.xproto.StackMode.Above,
+def request_restack_window(window, stack_mode=xproto.StackMode.Above,
                            sibling=0, source=1):
     """
     Sends event to root window to restack a window.
@@ -1074,7 +1074,7 @@ def request_restack_window(window, stack_mode=xcb.xproto.StackMode.Above,
     return revent(window, '_NET_RESTACK_WINDOW', source, sibling, stack_mode)
 
 def request_restack_window_checked(window,
-                                   stack_mode=xcb.xproto.StackMode.Above,
+                                   stack_mode=xproto.StackMode.Above,
                                    sibling=0, source=2):
     return revent_checked(window, '_NET_RESTACK_WINDOW',
                           source, sibling, stack_mode)
@@ -1117,12 +1117,12 @@ def set_wm_name(window, wm_name):
     :param wm_name: The title of the window.
     :rtype:         xcb.VoidCookie
     """
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_NAME'),
                                  atom('UTF8_STRING'), 8, len(wm_name), wm_name)
 
 def set_wm_name_checked(window, wm_name):
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_NAME'),
                                         atom('UTF8_STRING'), 8, len(wm_name),
                                         wm_name)
@@ -1152,12 +1152,12 @@ def set_wm_visible_name(window, wm_name):
     :param wm_name: The title of the window.
     :rtype:         xcb.VoidCookie
     """
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_VISIBLE_NAME'),
                                  atom('UTF8_STRING'), 8, len(wm_name), wm_name)
 
 def set_wm_visible_name_checked(window, wm_name):
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_VISIBLE_NAME'),
                                         atom('UTF8_STRING'), 8, len(wm_name),
                                         wm_name)
@@ -1186,12 +1186,12 @@ def set_wm_icon_name(window, icon_name):
     :param icon_name:   The icon name of the window.
     :rtype:             xcb.VoidCookie
     """
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_ICON_NAME'), atom('UTF8_STRING'),
                                  8, len(icon_name), icon_name)
 
 def set_wm_icon_name_checked(window, icon_name):
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_ICON_NAME'),
                                         atom('UTF8_STRING'), 8, len(icon_name),
                                         icon_name)
@@ -1221,13 +1221,13 @@ def set_wm_visible_icon_name(window, icon_name):
     :param icon_name:   The icon name of the window.
     :rtype:             xcb.VoidCookie
     """
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_VISIBLE_ICON_NAME'),
                                  atom('UTF8_STRING'), 8, len(icon_name),
                                  icon_name)
 
 def set_wm_visible_icon_name_checked(window, icon_name):
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_VISIBLE_ICON_NAME'),
                                         atom('UTF8_STRING'), 8, len(icon_name),
                                         icon_name)
@@ -1277,14 +1277,14 @@ def set_wm_window_opacity(window, opacity):
     """
     assert 0 <= opacity <= 1
     packed = struct.pack('I', int(opacity * 0xffffffff))
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_WINDOW_OPACITY'),
                                  CARDINAL, 32, 1, packed)
 
 def set_wm_window_opacity_checked(window, opacity):
     assert 0 <= opacity <= 1
     packed = struct.pack('I', int(opacity * 0xffffffff))
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_WINDOW_OPACITY'),
                                         CARDINAL, 32, 1, packed)
 
@@ -1314,12 +1314,12 @@ def set_wm_desktop(window, desktop):
     :type desktop:  CARDINAL/32
     :rtype:         xcb.VoidCookie
     """
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_DESKTOP'),
                                  CARDINAL, 32, 1, [desktop])
 
 def set_wm_desktop_checked(window, desktop):
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_DESKTOP'),
                                         CARDINAL, 32, 1, [desktop])
 
@@ -1364,13 +1364,13 @@ def set_wm_window_type(window, types):
     :rtype:         xcb.VoidCookie
     """
     packed = struct.pack('I' * len(types), *types)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_WINDOW_TYPE'),
                                  ATOM, 32, len(types), packed)
 
 def set_wm_window_type_checked(window, types):
     packed = struct.pack('I' * len(types), *types)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_WINDOW_TYPE'),
                                         ATOM, 32, len(types), packed)
 
@@ -1400,13 +1400,13 @@ def set_wm_state(window, states):
     :rtype:         xcb.VoidCookie
     """
     packed = struct.pack('I' * len(states), *states)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_STATE'), ATOM, 32, len(states),
                                  packed)
 
 def set_wm_state_checked(window, states):
     packed = struct.pack('I' * len(states), *states)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_STATE'),
                                         ATOM, 32, len(states), packed)
 
@@ -1461,13 +1461,13 @@ def set_wm_allowed_actions(window, actions):
     :rtype:         xcb.VoidCookie
     """
     packed = struct.pack('I' * len(actions), *actions)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_ALLOWED_ACTIONS'),
                                  ATOM, 32, len(actions), packed)
 
 def set_wm_allowed_actions_checked(window, actions):
     packed = struct.pack('I' * len(actions), *actions)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_ALLOWED_ACTIONS'),
                                         ATOM, 32, len(actions), packed)
 
@@ -1518,12 +1518,12 @@ def set_wm_strut(window, left, right, top, bottom):
     :rtype:         xcb.VoidCookie
     """
     packed = struct.pack('IIII', left, right, top, bottom)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_STRUT'), CARDINAL, 32, 4, packed)
 
 def set_wm_strut_checked(window, left, right, top, bottom):
     packed = struct.pack('IIII', left, right, top, bottom)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_STRUT'),
                                         CARDINAL, 32, 4, packed)
 
@@ -1598,7 +1598,7 @@ def set_wm_strut_partial(window, left, right, top, bottom, left_start_y,
     packed = struct.pack('I' * 12, left, right, top, bottom, left_start_y,
                          left_end_y, right_start_y, right_end_y, top_start_x,
                          top_end_x, bottom_start_x, bottom_end_x)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_STRUT_PARTIAL'),
                                  CARDINAL, 32, 12, packed)
 
@@ -1609,7 +1609,7 @@ def set_wm_strut_partial_checked(window, left, right, top, bottom,
     packed = struct.pack('I' * 12, left, right, top, bottom, left_start_y,
                          left_end_y, right_start_y, right_end_y, top_start_x,
                          top_end_x, bottom_start_x, bottom_end_x)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_STRUT_PARTIAL'),
                                         CARDINAL, 32, 12, packed)
 
@@ -1662,13 +1662,13 @@ def set_wm_icon_geometry(window, x, y, width, height):
     :rtype:         xcb.VoidCookie
     """
     packed = struct.pack('IIII', x, y, width, height)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_ICON_GEOMETRY'),
                                  CARDINAL, 32, 4, packed)
 
 def set_wm_icon_geometry_checked(window, x, y, width, height):
     packed = struct.pack('IIII', x, y, width, height)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_ICON_GEOMETRY'),
                                         CARDINAL, 32, 4, packed)
 
@@ -1730,7 +1730,7 @@ def set_wm_icon(window, icons):
             flatten.append(argb)
     packed = struct.pack('I' * len(flatten), *flatten)
 
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_ICON'),
                                  CARDINAL, 32, len(flatten), packed)
 
@@ -1743,7 +1743,7 @@ def set_wm_icon_checked(window, icons):
             flatten.append(argb)
     packed = struct.pack('I' * len(flatten), *flatten)
 
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_ICON'),
                                         CARDINAL, 32, len(flatten), packed)
 
@@ -1773,13 +1773,13 @@ def set_wm_pid(window, pid):
     :rtype:         xcb.VoidCookie
     """
     packed = struct.pack('I', pid)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_PID'), CARDINAL, 32, 1,
                                  packed)
 
 def set_wm_pid_checked(window, pid):
     packed = struct.pack('I', pid)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_PID'), CARDINAL, 32, 1,
                                         packed)
 
@@ -1808,12 +1808,12 @@ def set_wm_handled_icons(window):
     :return:        Whether this property is set or not.
     :rtype:         xcb.VoidCookie
     """
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_HANDLED_ICONS'), CARDINAL, 32, 1,
                                  [1])
 
 def set_wm_handled_icons_checked(window):
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_HANDLED_ICONS'),
                                         CARDINAL, 32, 1, [1])
 
@@ -1843,12 +1843,12 @@ def set_wm_user_time(window, user_time):
     :type user_time:    CARDINAL/32
     :rtype:             xcb.VoidCookie
     """
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_USER_TIME'), CARDINAL, 32, 1,
                                  [user_time])
 
 def set_wm_user_time_checked(window, user_time):
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_USER_TIME'),
                                         CARDINAL, 32, 1, [user_time])
 
@@ -1878,12 +1878,12 @@ def set_wm_user_time_window(window, time_win):
     :type time_win:     WINDOW/32
     :rtype:             xcb.VoidCookie
     """
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_USER_TIME_WINDOW'),
                                  WINDOW, 32, 1, [time_win])
 
 def set_wm_user_time_window_checked(window, time_win):
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_USER_TIME_WINDOW'),
                                         WINDOW, 32, 1, [time_win])
 
@@ -1935,20 +1935,20 @@ def set_frame_extents(window, left, right, top, bottom):
     :rtype:         xcb.VoidCookie
     """
     packed = struct.pack('IIII', left, right, top, bottom)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_FRAME_EXTENTS'), CARDINAL, 32, 4,
                                  packed)
 
 def set_frame_extents_checked(window, left, right, top, bottom):
     packed = struct.pack('IIII', left, right, top, bottom)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_FRAME_EXTENTS'),
                                         CARDINAL, 32, 4, packed)
 
 # _NET_WM_PING
 
 def request_wm_ping(window, response=False,
-                    timestamp=xcb.xproto.Time.CurrentTime):
+                    timestamp=xproto.Time.CurrentTime):
     """
     Sends an event to root window to ping a window or respond to a ping.
 
@@ -1961,14 +1961,14 @@ def request_wm_ping(window, response=False,
                   'WM_PROTOCOLS', atom('_NET_WM_PING'), timestamp, window)
 
 def request_wm_ping_checked(window, response=False,
-                            timestamp=xcb.xproto.Time.CurrentTime):
+                            timestamp=xproto.Time.CurrentTime):
     return revent_checked(window if not response else root(c), 'WM_PROTOCOLS',
                           atom('_NET_WM_PING'), timestamp, window)
 
 # _NET_WM_SYNC_REQUEST
 
 def request_wm_sync_request(window, req_num,
-                            timestamp=xcb.xproto.Time.CurrentTime):
+                            timestamp=xproto.Time.CurrentTime):
     """
     Sends an event to root window to sync with a client.
 
@@ -1984,7 +1984,7 @@ def request_wm_sync_request(window, req_num,
                   atom('_NET_WM_SYNC_REQUEST'), timestamp, low, high)
 
 def request_wm_sync_request_checked(window, req_num,
-                                    timestamp=xcb.xproto.Time.CurrentTime):
+                                    timestamp=xproto.Time.CurrentTime):
     high = req_num >> 32
     low = (high << 32) ^ req_num
 
@@ -2018,13 +2018,13 @@ def set_wm_sync_request_counter(window, counter):
     :rtype:             xcb.VoidCookie
     """
     packed = struct.pack('I', counter)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_SYNC_REQUEST_COUNTER'),
                                  CARDINAL, 32, 1, packed)
 
 def set_wm_sync_request_counter_checked(window, counter):
     packed = struct.pack('I', counter)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_SYNC_REQUEST_COUNTER'),
                                         CARDINAL, 32, 1, packed)
 
@@ -2074,13 +2074,13 @@ def set_wm_fullscreen_monitors(window, top, bottom, left, right):
     :rtype:         xcb.VoidCookie
     """
     packed = struct.pack('IIII', top, bottom, left, right)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('_NET_WM_FULLSCREEN_MONITORS'),
                                  CARDINAL, 32, 4, packed)
 
 def set_wm_fullscreen_monitors_checked(window, top, bottom, left, right):
     packed = struct.pack('IIII', top, bottom, left, right)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('_NET_WM_FULLSCREEN_MONITORS'),
                                         CARDINAL, 32, 4, packed)
 
diff --git a/xpybutil/font.py b/xpybutil/font.py
index 8190620..68b448f 100644
--- a/xpybutil/font.py
+++ b/xpybutil/font.py
@@ -5,18 +5,18 @@ yourself wanting to use this module, you're probably doing something wrong.
 
 This module will likely be removed in the future.
 """
-import xcb.xproto
+from xpybutil.compat import xproto
 
 def get_font_height(qfont):
     return qfont.max_bounds.ascent + qfont.max_bounds.descent
 
 def get_text_width(qfont, text):
-    assert isinstance(qfont, xcb.xproto.QueryFontReply)
+    assert isinstance(qfont, xproto.QueryFontReply)
 
     return sum([qfont.char_infos[ord(i)].character_width for i in text])
 
 def get_text_height(qfont, text):
-    assert isinstance(qfont, xcb.xproto.QueryFontReply)
+    assert isinstance(qfont, xproto.QueryFontReply)
 
     cinfo = qfont.char_infos
     return max([cinfo[ord(i)].ascent + cinfo[ord(i)].descent for i in text])
diff --git a/xpybutil/icccm.py b/xpybutil/icccm.py
index a7ccfb8..d232ebb 100644
--- a/xpybutil/icccm.py
+++ b/xpybutil/icccm.py
@@ -8,7 +8,7 @@ to this module.
 from collections import defaultdict
 import struct
 
-import xcb.xproto
+from xpybutil.compat import xproto
 
 from xpybutil import conn as c
 import util
@@ -48,7 +48,7 @@ class State:
 
 # Some aliases
 atom = util.get_atom
-atoms = xcb.xproto.Atom
+atoms = xproto.Atom
 
 # Build the atom cache for quicker access
 util.build_atom_cache(__atoms)
@@ -63,12 +63,12 @@ def get_wm_name_unchecked(window):
                                                            atoms.WM_NAME))
 
 def set_wm_name(window, wm_name):
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atoms.WM_NAME, atoms.STRING, 8, len(wm_name),
                                  wm_name)
 
 def set_wm_name_checked(window, wm_name):
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atoms.WM_NAME, atoms.STRING, 8, 
                                         len(wm_name), wm_name)
 
@@ -82,12 +82,12 @@ def get_wm_icon_name_unchecked(window):
                                                            atoms.WM_ICON_NAME))
 
 def set_wm_icon_name(window, wm_icon_name):
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atoms.WM_ICON_NAME, atoms.STRING, 8,
                                  len(wm_icon_name), wm_icon_name)
 
 def set_wm_icon_name_checked(window, wm_icon_name):
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atoms.WM_ICON_NAME, atoms.STRING, 8,
                                         len(wm_icon_name), wm_icon_name)
 
@@ -126,7 +126,7 @@ class NormalHintsCookie(util.PropertyCookie):
                 return
 
             if f == 'win_gravity' and v[i] <= 0:
-                v[i] = xcb.xproto.Gravity.NorthWest
+                v[i] = xproto.Gravity.NorthWest
 
             retval[f] = v[i]
 
@@ -184,13 +184,13 @@ def set_wm_normal_hints(window, flags, x=0, y=0, width=0,
                         height_inc=0, min_aspect_num=0,
                         min_aspect_den=0, max_aspect_num=0,
                         max_aspect_den=0, base_width=0, base_height=0,
-                        win_gravity=xcb.xproto.Gravity.NorthWest):
+                        win_gravity=xproto.Gravity.NorthWest):
     packed = _pack_normal_hints(flags, x, y, width, height, min_width,
                                 min_height, max_width, max_height, width_inc,
                                 height_inc, min_aspect_num, min_aspect_den,
                                 max_aspect_num, max_aspect_den, base_width,
                                 base_height, win_gravity)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atoms.WM_NORMAL_HINTS, atoms.WM_SIZE_HINTS, 32,
                                  18, packed)
 
@@ -200,13 +200,13 @@ def set_wm_normal_hints_checked(window, flags, x=0, y=0, width=0,
                                 height_inc=0, min_aspect_num=0,
                                 min_aspect_den=0, max_aspect_num=0,
                                 max_aspect_den=0, base_width=0, base_height=0,
-                                win_gravity=xcb.xproto.Gravity.NorthWest):
+                                win_gravity=xproto.Gravity.NorthWest):
     packed = _pack_normal_hints(flags, x, y, width, height, min_width,
                                 min_height, max_width, max_height, width_inc,
                                 height_inc, min_aspect_num, min_aspect_den,
                                 max_aspect_num, max_aspect_den, base_width,
                                 base_height, win_gravity)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atoms.WM_NORMAL_HINTS,
                                         atoms.WM_SIZE_HINTS, 32, 18, packed)
 
@@ -281,7 +281,7 @@ def set_wm_hints(window, flags, input=1, initial_state=State.Normal,
                  icon_mask=0, window_group=0):
     packed = _pack_hints(flags, input, initial_state, icon_pixmap, icon_window,
                          icon_x, icon_y, icon_mask, window_group)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atoms.WM_HINTS, atoms.WM_HINTS, 32, 9, packed)
 
 def set_wm_hints_checked(window, flags, input=1,
@@ -290,7 +290,7 @@ def set_wm_hints_checked(window, flags, input=1,
                          window_group=0):
     packed = _pack_hints(flags, input, initial_state, icon_pixmap, icon_window,
                          icon_x, icon_y, icon_mask, window_group)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atoms.WM_HINTS, atoms.WM_HINTS, 32,
                                         9, packed)
 
@@ -304,13 +304,13 @@ def get_wm_class_unchecked(window):
                                                            atoms.WM_CLASS))
 
 def set_wm_class(window, instance, cls):
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atoms.WM_CLASS, atoms.STRING, 8,
                                  len(instance) + len(cls) + 2,
                                  instance + chr(0) + cls + chr(0))
 
 def set_wm_class_checked(window, instance, cls):
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atoms.WM_CLASS, atoms.STRING, 8,
                                         len(instance) + len(cls) + 2,
                                         instance + chr(0) + cls + chr(0))
@@ -327,13 +327,13 @@ def get_wm_transient_for_unchecked(window):
 
 def set_wm_transient_for(window, transient_window):
     packed = struct.pack('I', transient_window)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atoms.WM_TRANSIENT_FOR, atoms.WINDOW, 32,
                                  1, packed)
 
 def set_wm_transient_for_checked(window, transient_window):
     packed = struct.pack('I', transient_window)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atoms.WM_TRANSIENT_FOR,
                                         atoms.WINDOW, 32, 1, packed)
 
@@ -348,13 +348,13 @@ def get_wm_protocols_unchecked(window):
 
 def set_wm_protocols(window, protocol_atoms):
     packed = struct.pack('I' * len(protocol_atoms), *protocol_atoms)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('WM_PROTOCOLS'), atoms.ATOM, 32,
                                  len(protocol_atoms), packed)
 
 def set_wm_protocols_checked(window, protocol_atoms):
     packed = struct.pack('I' * len(protocol_atoms), *protocol_atoms)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('WM_PROTOCOLS'), atoms.ATOM, 32,
                                         len(protocol_atoms), packed)
 
@@ -369,13 +369,13 @@ def get_wm_colormap_windows_unchecked(window):
 
 def set_wm_colormap_windows(window, colormap_windows):
     packed = struct.pack('I' * len(colormap_windows), *colormap_windows)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('WM_COLORMAP_WINDOWS'), atoms.WINDOW, 32,
                                  len(colormap_windows), packed)
 
 def set_wm_colormap_windows_checked(window, colormap_windows):
     packed = struct.pack('I' * len(colormap_windows), *colormap_windows)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('WM_COLORMAP_WINDOWS'),
                                         atoms.WINDOW, 32,
                                         len(colormap_windows), packed)
@@ -391,12 +391,12 @@ def get_wm_client_machine_unchecked(window):
     return util.PropertyCookie(cook)
 
 def set_wm_client_machine(window, client_machine):
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atoms.WM_CLIENT_MACHINE, atoms.STRING, 8,
                                  len(client_machine), client_machine)
 
 def set_wm_client_machine_checked(window, client_machine):
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atoms.WM_CLIENT_MACHINE,
                                         atoms.STRING, 8,
                                         len(client_machine), client_machine)
@@ -423,13 +423,13 @@ def get_wm_state_unchecked(window):
 
 def set_wm_state(window, state, icon):
     packed = struct.pack('II', state, icon)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atom('WM_STATE'), atom('WM_STATE'), 32,
                                  2, packed)
 
 def set_wm_state_checked(window, state, icon):
     packed = struct.pack('II', state, icon)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atom('WM_STATE'), atom('WM_STATE'), 32,
                                         2, packed)
 
@@ -462,7 +462,7 @@ def set_icon_size(window, min_width=0, min_height=0, max_width=0,
                  max_height=0, width_inc=0, height_inc=0):
     packed = struct.pack('I' * 6, min_width, min_height, max_width, max_height,
                                   width_inc, height_inc)
-    return c.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangeProperty(xproto.PropMode.Replace, window,
                                  atoms.WM_ICON_SIZE, atoms.WM_ICON_SIZE, 32,
                                  6, packed)
 
@@ -470,7 +470,7 @@ def set_icon_size_checked(window, min_width=0, min_height=0, max_width=0,
                          max_height=0, width_inc=0, height_inc=0):
     packed = struct.pack('I' * 6, min_width, min_height, max_width, max_height,
                                   width_inc, height_inc)
-    return c.core.ChangePropertyChecked(xcb.xproto.PropMode.Replace, window,
+    return c.core.ChangePropertyChecked(xproto.PropMode.Replace, window,
                                         atoms.WM_ICON_SIZE,
                                         atoms.WM_ICON_SIZE, 32, 6, packed)
 
diff --git a/xpybutil/image.py b/xpybutil/image.py
index 5ba5926..d7bb4c4 100644
--- a/xpybutil/image.py
+++ b/xpybutil/image.py
@@ -2,7 +2,7 @@
 An incomplete and haphazard collection of functions that can 
 bridge a gap between PIL and drawing images with X.
 """
-import xcb.xproto
+from xpybutil.compat import xproto
 
 from xpybutil import conn
 from PIL import Image
@@ -34,12 +34,12 @@ def hex_to_rgb(h):
 def get_image_from_pixmap(pid):
     try:
         geom = conn.core.GetGeometry(pid).reply()
-        pimg = conn.core.GetImage(xcb.xproto.ImageFormat.ZPixmap, pid,
+        pimg = conn.core.GetImage(xproto.ImageFormat.ZPixmap, pid,
                                   0, 0, geom.width, geom.height,
                                   2**32 - 1).reply().data
 
         return geom.width, geom.height, pimg
-    except xcb.xproto.BadDrawable:
+    except xproto.BadDrawable:
         return 0, 0, []
 
 def get_image(width, height, data):
diff --git a/xpybutil/keybind.py b/xpybutil/keybind.py
index 5326f06..00912e1 100644
--- a/xpybutil/keybind.py
+++ b/xpybutil/keybind.py
@@ -10,7 +10,7 @@ if you're getting down and dirty.
 from collections import defaultdict
 import sys
 
-import xcb.xproto as xproto
+from xpybutil.compat import xproto
 
 from xpybutil import conn, root, event
 from xpybutil.keysymdef import keysyms, keysym_strings
diff --git a/xpybutil/motif.py b/xpybutil/motif.py
index 56aeb36..58fa202 100644
--- a/xpybutil/motif.py
+++ b/xpybutil/motif.py
@@ -5,7 +5,7 @@ toggling window decorations via events.
 """
 import struct
 
-import xcb.xproto
+from xpybutil.compat import xproto
 
 from xpybutil import conn as c
 import util
@@ -48,7 +48,7 @@ class Status:
 
 # Some aliases
 atom = util.get_atom
-preplace = xcb.xproto.PropMode.Replace
+preplace = xproto.PropMode.Replace
 
 # Build the atom cache for quicker access
 util.build_atom_cache(__atoms)
diff --git a/xpybutil/mousebind.py b/xpybutil/mousebind.py
index 6c5fef5..60609b7 100644
--- a/xpybutil/mousebind.py
+++ b/xpybutil/mousebind.py
@@ -11,7 +11,7 @@ TODO: Mouse bindings that hook into the event dipatcher like the keybind
 """
 from collections import defaultdict
 
-import xcb.xproto as xproto
+from xpybutil.compat import xproto
 
 from xpybutil import conn, root
 
diff --git a/xpybutil/rect.py b/xpybutil/rect.py
index 5ca68d1..b5a12fb 100644
--- a/xpybutil/rect.py
+++ b/xpybutil/rect.py
@@ -5,7 +5,7 @@ For example, finding the area of intersection of two rectangles with
 ``rect_intersect_area``, or getting the rectangle of a monitor after accounting
 for struts with ``monitor_rects``.
 """
-import xcb.xproto
+from xpybutil.compat import xproto
 
 import xpybutil.ewmh as ewmh
 import xpybutil.window as window
@@ -74,7 +74,7 @@ def monitor_rects(monitors):
     for c in clients:
         try:
             cx, cy, cw, ch = window.get_geometry(c)
-        except xcb.xproto.BadWindow:
+        except xproto.BadWindow:
             continue
 
         for i, (x, y, w, h) in enumerate(wa):
diff --git a/xpybutil/render.py b/xpybutil/render.py
index 882ca77..43936a7 100644
--- a/xpybutil/render.py
+++ b/xpybutil/render.py
@@ -6,7 +6,7 @@ quite nice.) It's called pycompmgr.
 This is meant to be a very close translation to the corresponding xcb-util
 module. Mostly because I lack a deep understanding of everything here.
 """
-import xcb, xcb.xproto, xcb.render
+from xpybutil.compat import render
 
 class PictFormat:
     Id = 1
@@ -34,7 +34,7 @@ standardFormats = [
     {
         'template': {
             'id': 0,
-            'type': xcb.render.PictType.Direct,
+            'type': render.PictType.Direct,
             'depth': 32,
             'direct': {
                 'red': 16,
@@ -59,7 +59,7 @@ standardFormats = [
     {
         'template': {
             'id': 0,
-            'type': xcb.render.PictType.Direct,
+            'type': render.PictType.Direct,
             'depth': 24,
             'direct': {
                 'red': 16,
@@ -83,7 +83,7 @@ standardFormats = [
     {
         'template': {
             'id': 0,
-            'type': xcb.render.PictType.Direct,
+            'type': render.PictType.Direct,
             'depth': 8,
             'direct': {
                 'red': 0,
@@ -107,7 +107,7 @@ standardFormats = [
     {
         'template': {
             'id': 0,
-            'type': xcb.render.PictType.Direct,
+            'type': render.PictType.Direct,
             'depth': 4,
             'direct': {
                 'red': 0,
@@ -131,7 +131,7 @@ standardFormats = [
     {
         'template': {
             'id': 0,
-            'type': xcb.render.PictType.Direct,
+            'type': render.PictType.Direct,
             'depth': 1,
             'direct': {
                 'red': 0,
diff --git a/xpybutil/util.py b/xpybutil/util.py
index 9cd7589..be3bbea 100644
--- a/xpybutil/util.py
+++ b/xpybutil/util.py
@@ -5,7 +5,7 @@ heavily used throughout the rest of xpybutil.
 """
 import struct
 
-import xcb.xproto
+from xpybutil.compat import xproto
 
 from xpybutil import conn
 
@@ -122,7 +122,7 @@ def get_property(window, atom):
     if isinstance(atom, basestring):
         atom = get_atom(atom)
     return conn.core.GetProperty(False, window, atom,
-                                 xcb.xproto.GetPropertyType.Any, 0,
+                                 xproto.GetPropertyType.Any, 0,
                                  2 ** 32 - 1)
 
 def get_property_unchecked(window, atom):
@@ -142,7 +142,7 @@ def get_property_unchecked(window, atom):
     if isinstance(atom, basestring):
         atom = get_atom(atom)
     return conn.core.GetPropertyUnchecked(False, window, atom,
-                                          xcb.xproto.GetPropertyType.Any, 0,
+                                          xproto.GetPropertyType.Any, 0,
                                           2 ** 32 - 1)
 
 def build_atom_cache(atoms):
diff --git a/xpybutil/window.py b/xpybutil/window.py
index 77c7a20..369974f 100644
--- a/xpybutil/window.py
+++ b/xpybutil/window.py
@@ -31,7 +31,7 @@ The idea here is to tell X that you want events that fall under
 the 'PropertyChange' category. Then you bind 'func' to the 
 particular event 'PropertyNotify'.
 """
-import xcb.xproto
+from xpybutil.compat import xproto
 
 from xpybutil import conn
 import xpybutil.ewmh as ewmh
@@ -68,10 +68,10 @@ def listen(window, *event_mask_names):
     """
     masks = 0
     for mask_name in event_mask_names:
-        assert hasattr(xcb.xproto.EventMask, mask_name)
-        masks |= getattr(xcb.xproto.EventMask, mask_name)
+        assert hasattr(xproto.EventMask, mask_name)
+        masks |= getattr(xproto.EventMask, mask_name)
 
-    conn.core.ChangeWindowAttributesChecked(window, xcb.xproto.CW.EventMask, 
+    conn.core.ChangeWindowAttributesChecked(window, xproto.CW.EventMask,
                                             [masks]).check()
 
 def get_parent_window(window):
diff --git a/xpybutil/xinerama.py b/xpybutil/xinerama.py
index c76a1b1..b8c8806 100644
--- a/xpybutil/xinerama.py
+++ b/xpybutil/xinerama.py
@@ -8,13 +8,13 @@ monitor indices in a physical ordering (left to right, top to
 bottom). These indices can then be used in the list returned by
 'get_monitors'.
 """
-import xcb.xinerama
+from xpybutil.compat import xinerama
 
 from xpybutil import conn
 
 ext = None
 if conn is not None:
-    ext = conn(xcb.xinerama.key)
+    ext = conn(xinerama.key)
 
 def get_monitors():
     '''
