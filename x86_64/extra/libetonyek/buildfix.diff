From f48bd16df9c0a99ba5480d918ecb6d6e48e6f383 Mon Sep 17 00:00:00 2001
From: David Tardon <dtardon@redhat.com>
Date: Wed, 18 Nov 2015 12:24:26 +0100
Subject: [PATCH] fix compilation on i386

Change-Id: Ia8b63e6aeb07f4f697211f4d8ede6f840773a9f2
---
 src/test/IWASnappyStreamTest.cpp |    4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/test/IWASnappyStreamTest.cpp b/src/test/IWASnappyStreamTest.cpp
index 015208a..bc11724 100644
--- a/src/test/IWASnappyStreamTest.cpp
+++ b/src/test/IWASnappyStreamTest.cpp
@@ -36,7 +36,7 @@ void assertCompressed(const string &message, const unsigned char *const expected
   unsigned long uncompressedSize = 0;
   const unsigned char *const uncompressed = uncompressedStream->read(expectedSize, uncompressedSize);
   assert(uncompressed);
-  CPPUNIT_ASSERT_EQUAL_MESSAGE(message + ": size", expectedSize, uncompressedSize);
+  CPPUNIT_ASSERT_EQUAL_MESSAGE(message + ": size", expectedSize, size_t(uncompressedSize));
   CPPUNIT_ASSERT_MESSAGE(message + ": input exhausted", uncompressedStream->isEnd());
   CPPUNIT_ASSERT_MESSAGE(message + ": content", std::equal(expected, expected + expectedSize, uncompressed));
 }
@@ -48,7 +48,7 @@ void assertCompressedFull(const string &message, const unsigned char *const expe
   unsigned long uncompressedSize = 0;
   const unsigned char *const uncompressed = uncompressedStream.read(expectedSize, uncompressedSize);
   assert(uncompressed);
-  CPPUNIT_ASSERT_EQUAL_MESSAGE(message + ": size", expectedSize, uncompressedSize);
+  CPPUNIT_ASSERT_EQUAL_MESSAGE(message + ": size", expectedSize, size_t(uncompressedSize));
   CPPUNIT_ASSERT_MESSAGE(message + ": input exhausted", uncompressedStream.isEnd());
   CPPUNIT_ASSERT_MESSAGE(message + ": content", std::equal(expected, expected + expectedSize, uncompressed));
 }
-- 
1.7.9.5
From e10e50b1bf37a275757de6b4c3f9791c5ef64742 Mon Sep 17 00:00:00 2001
From: David Tardon <dtardon@redhat.com>
Date: Wed, 18 Nov 2015 13:25:22 +0100
Subject: [PATCH] fix build on OS X

Change-Id: If979903fd6877f1b2f562695399e4cbe97efea2c
---
 src/test/LibetonyekUtilsTest.cpp |   24 ++++++++++++------------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/src/test/LibetonyekUtilsTest.cpp b/src/test/LibetonyekUtilsTest.cpp
index 5c7af4c..5b6a7c6 100644
--- a/src/test/LibetonyekUtilsTest.cpp
+++ b/src/test/LibetonyekUtilsTest.cpp
@@ -73,12 +73,12 @@ void LibetonyekUtilsTest::tearDown()
 
 void LibetonyekUtilsTest::testReadSVar()
 {
-  CPPUNIT_ASSERT_EQUAL(0L, readSVar(makeStream("\x0", 1)));
-  CPPUNIT_ASSERT_EQUAL(-1L, readSVar(makeStream("\x1", 1)));
-  CPPUNIT_ASSERT_EQUAL(1L, readSVar(makeStream("\x2", 1)));
-  CPPUNIT_ASSERT_EQUAL(-2L, readSVar(makeStream("\x3", 1)));
-  CPPUNIT_ASSERT_EQUAL(0x7fffffffL, readSVar(makeStream("\xfe\xff\xff\xff\xf", 5)));
-  CPPUNIT_ASSERT_EQUAL(-0x80000000L, readSVar(makeStream("\xff\xff\xff\xff\xf", 5)));
+  CPPUNIT_ASSERT_EQUAL(int64_t(0), readSVar(makeStream("\x0", 1)));
+  CPPUNIT_ASSERT_EQUAL(int64_t(-1), readSVar(makeStream("\x1", 1)));
+  CPPUNIT_ASSERT_EQUAL(int64_t(1), readSVar(makeStream("\x2", 1)));
+  CPPUNIT_ASSERT_EQUAL(int64_t(-2), readSVar(makeStream("\x3", 1)));
+  CPPUNIT_ASSERT_EQUAL(int64_t(0x7fffffffL), readSVar(makeStream("\xfe\xff\xff\xff\xf", 5)));
+  CPPUNIT_ASSERT_EQUAL(int64_t(-0x80000000L), readSVar(makeStream("\xff\xff\xff\xff\xf", 5)));
   CPPUNIT_ASSERT_EQUAL(numeric_limits<int64_t>::max(), readSVar(makeStream("\xfe\xff\xff\xff\xff\xff\xff\xff\xff\x1", 10)));
   CPPUNIT_ASSERT_EQUAL(numeric_limits<int64_t>::min(), readSVar(makeStream("\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1", 10)));
   CPPUNIT_ASSERT_THROW(readSVar(makeStream("\x80\x80\x80\x80\x80\x80\x80\x80\x80\x2", 10)), std::range_error);
@@ -90,12 +90,12 @@ void LibetonyekUtilsTest::testReadSVar()
 
 void LibetonyekUtilsTest::testReadUVar()
 {
-  CPPUNIT_ASSERT_EQUAL(0UL, readUVar(makeStream("\x0", 1)));
-  CPPUNIT_ASSERT_EQUAL(1UL, readUVar(makeStream("\x1", 1)));
-  CPPUNIT_ASSERT_EQUAL(0x7fUL, readUVar(makeStream("\x7f", 1)));
-  CPPUNIT_ASSERT_EQUAL(0x80UL, readUVar(makeStream("\x80\x1", 2)));
-  CPPUNIT_ASSERT_EQUAL(0x81UL, readUVar(makeStream("\x81\x1", 2)));
-  CPPUNIT_ASSERT_EQUAL(0x12345678UL, readUVar(makeStream("\xf8\xac\xd1\x91\x01", 5)));
+  CPPUNIT_ASSERT_EQUAL(uint64_t(0), readUVar(makeStream("\x0", 1)));
+  CPPUNIT_ASSERT_EQUAL(uint64_t(1), readUVar(makeStream("\x1", 1)));
+  CPPUNIT_ASSERT_EQUAL(uint64_t(0x7f), readUVar(makeStream("\x7f", 1)));
+  CPPUNIT_ASSERT_EQUAL(uint64_t(0x80), readUVar(makeStream("\x80\x1", 2)));
+  CPPUNIT_ASSERT_EQUAL(uint64_t(0x81), readUVar(makeStream("\x81\x1", 2)));
+  CPPUNIT_ASSERT_EQUAL(uint64_t(0x12345678UL), readUVar(makeStream("\xf8\xac\xd1\x91\x01", 5)));
   CPPUNIT_ASSERT_EQUAL(numeric_limits<uint64_t>::max(), readUVar(makeStream("\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1", 10)));
   CPPUNIT_ASSERT_THROW(readUVar(makeStream("\x80\x80\x80\x80\x80\x80\x80\x80\x80\x2", 10)), std::range_error);
   CPPUNIT_ASSERT_THROW(readUVar(makeEmptyStream()), EndOfStreamException);
-- 
1.7.9.5
From f6d6c88cb3251cc06c1308f22f7ee9aa3bd690d3 Mon Sep 17 00:00:00 2001
From: David Tardon <dtardon@redhat.com>
Date: Wed, 18 Nov 2015 14:52:55 +0100
Subject: [PATCH] fix test on i386

Change-Id: I7fcf0f54ffca63fd0d9c545e255dfc2f42ab6bcb
---
 src/test/LibetonyekUtilsTest.cpp |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/test/LibetonyekUtilsTest.cpp b/src/test/LibetonyekUtilsTest.cpp
index 5b6a7c6..71f2273 100644
--- a/src/test/LibetonyekUtilsTest.cpp
+++ b/src/test/LibetonyekUtilsTest.cpp
@@ -78,7 +78,7 @@ void LibetonyekUtilsTest::testReadSVar()
   CPPUNIT_ASSERT_EQUAL(int64_t(1), readSVar(makeStream("\x2", 1)));
   CPPUNIT_ASSERT_EQUAL(int64_t(-2), readSVar(makeStream("\x3", 1)));
   CPPUNIT_ASSERT_EQUAL(int64_t(0x7fffffffL), readSVar(makeStream("\xfe\xff\xff\xff\xf", 5)));
-  CPPUNIT_ASSERT_EQUAL(int64_t(-0x80000000L), readSVar(makeStream("\xff\xff\xff\xff\xf", 5)));
+  CPPUNIT_ASSERT_EQUAL(int64_t(numeric_limits<int32_t>::min()), readSVar(makeStream("\xff\xff\xff\xff\xf", 5)));
   CPPUNIT_ASSERT_EQUAL(numeric_limits<int64_t>::max(), readSVar(makeStream("\xfe\xff\xff\xff\xff\xff\xff\xff\xff\x1", 10)));
   CPPUNIT_ASSERT_EQUAL(numeric_limits<int64_t>::min(), readSVar(makeStream("\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1", 10)));
   CPPUNIT_ASSERT_THROW(readSVar(makeStream("\x80\x80\x80\x80\x80\x80\x80\x80\x80\x2", 10)), std::range_error);
-- 
1.7.9.5

